
RTC_ExitStandbyWithWakeUpTimer_Init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b8  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080016f0  080016f0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080016f0  080016f0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080016f0  080016f0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016f0  080016f0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080016f0  080016f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080016f8  080016f8  000116f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  08001708  00020008  2**2
                  ALLOC
 10 RAM1_region   00000000  20000028  20000028  00020008  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020008  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000028  20000028  00020028  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 14 .debug_line   00003b23  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000049d7  00000000  00000000  00023b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000b63  00000000  00000000  0002852c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000580  00000000  00000000  00029090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073d4a  00000000  00000000  00029610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000518  00000000  00000000  0009d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000147cb  00000000  00000000  0009d878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  000b2043  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000169c  00000000  00000000  000b2094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000008 	.word	0x20000008
 8000154:	00000000 	.word	0x00000000
 8000158:	080016d8 	.word	0x080016d8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000000c 	.word	0x2000000c
 8000174:	080016d8 	.word	0x080016d8

08000178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800017c:	f000 fd4c 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480c      	ldr	r0, [pc, #48]	; (80001b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490d      	ldr	r1, [pc, #52]	; (80001b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0a      	ldr	r4, [pc, #40]	; (80001c4 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001a6:	f001 fa73 	bl	8001690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001aa:	f000 fb3d 	bl	8000828 <main>

080001ae <LoopForever>:

LoopForever:
    b LoopForever
 80001ae:	e7fe      	b.n	80001ae <LoopForever>
  ldr   r0, =_estack
 80001b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80001b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80001bc:	08001700 	.word	0x08001700
  ldr r2, =_sbss
 80001c0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80001c4:	20000028 	.word	0x20000028

080001c8 <ADC_IRQHandler>:
  * @retval : None
  */
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c8:	e7fe      	b.n	80001c8 <ADC_IRQHandler>
	...

080001cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f003 0307 	and.w	r3, r3, #7
 80001da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <__NVIC_SetPriorityGrouping+0x44>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e2:	68ba      	ldr	r2, [r7, #8]
 80001e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e8:	4013      	ands	r3, r2
 80001ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f0:	68bb      	ldr	r3, [r7, #8]
 80001f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fe:	4a04      	ldr	r2, [pc, #16]	; (8000210 <__NVIC_SetPriorityGrouping+0x44>)
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	60d3      	str	r3, [r2, #12]
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800021c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800023c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000240:	f003 0302 	and.w	r3, r3, #2
 8000244:	2b02      	cmp	r3, #2
 8000246:	d101      	bne.n	800024c <LL_RCC_LSE_IsReady+0x18>
 8000248:	2301      	movs	r3, #1
 800024a:	e000      	b.n	800024e <LL_RCC_LSE_IsReady+0x1a>
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr

08000256 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800025a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6013      	str	r3, [r2, #0]
}
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr

08000272 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000272:	b480      	push	{r7}
 8000274:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f003 0302 	and.w	r3, r3, #2
 8000280:	2b02      	cmp	r3, #2
 8000282:	d101      	bne.n	8000288 <LL_RCC_MSI_IsReady+0x16>
 8000284:	2301      	movs	r3, #1
 8000286:	e000      	b.n	800028a <LL_RCC_MSI_IsReady+0x18>
 8000288:	2300      	movs	r3, #0
}
 800028a:	4618      	mov	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr

08000292 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002a0:	f043 0308 	orr.w	r3, r3, #8
 80002a4:	6013      	str	r3, [r2, #0]
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr

080002ae <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80002ae:	b480      	push	{r7}
 80002b0:	b083      	sub	sp, #12
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80002b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80002c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4313      	orrs	r3, r2
 80002c8:	600b      	str	r3, [r1, #0]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80002dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	021b      	lsls	r3, r3, #8
 80002ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002ee:	4313      	orrs	r3, r2
 80002f0:	604b      	str	r3, [r1, #4]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f023 0203 	bic.w	r2, r3, #3
 800030e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4313      	orrs	r3, r2
 8000316:	608b      	str	r3, [r1, #8]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f003 030c 	and.w	r3, r3, #12
}
 8000330:	4618      	mov	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800034a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4313      	orrs	r3, r2
 8000352:	608b      	str	r3, [r1, #8]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr

0800035e <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800035e:	b480      	push	{r7}
 8000360:	b083      	sub	sp, #12
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800036a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800036e:	f023 020f 	bic.w	r2, r3, #15
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	091b      	lsrs	r3, r3, #4
 8000376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800037a:	4313      	orrs	r3, r2
 800037c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr

0800038a <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000396:	689b      	ldr	r3, [r3, #8]
 8000398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800039c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4313      	orrs	r3, r2
 80003a4:	608b      	str	r3, [r1, #8]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	608b      	str	r3, [r1, #8]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr

080003d6 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80003de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80003ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800040c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800042c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800044c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800046c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800046e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800047c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4013      	ands	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000484:	68fb      	ldr	r3, [r7, #12]
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800049e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80004a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4013      	ands	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b4:	68fb      	ldr	r3, [r7, #12]
}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <LL_FLASH_SetLatency+0x24>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f023 0207 	bic.w	r2, r3, #7
 80004d0:	4904      	ldr	r1, [pc, #16]	; (80004e4 <LL_FLASH_SetLatency+0x24>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	600b      	str	r3, [r1, #0]
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	58004000 	.word	0x58004000

080004e8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <LL_FLASH_GetLatency+0x14>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f003 0307 	and.w	r3, r3, #7
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	58004000 	.word	0x58004000

08000500 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <LL_LPM_EnableDeepSleep+0x18>)
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <LL_LPM_EnableDeepSleep+0x18>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6113      	str	r3, [r2, #16]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	e000ed00 	.word	0xe000ed00

0800051c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800052c:	4904      	ldr	r1, [pc, #16]	; (8000540 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	600b      	str	r3, [r1, #0]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	58000400 	.word	0x58000400

08000544 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <LL_PWR_EnableBkUpAccess+0x18>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <LL_PWR_EnableBkUpAccess+0x18>)
 800054e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000552:	6013      	str	r3, [r2, #0]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	58000400 	.word	0x58000400

08000560 <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <LL_PWR_SetPowerMode+0x24>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f023 0207 	bic.w	r2, r3, #7
 8000570:	4904      	ldr	r1, [pc, #16]	; (8000584 <LL_PWR_SetPowerMode+0x24>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4313      	orrs	r3, r2
 8000576:	600b      	str	r3, [r1, #0]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	58000400 	.word	0x58000400

08000588 <LL_PWR_IsActiveFlag_C1SB>:
  * @brief  Get system Standby flag for CPU1
  * @rmtoll EXTSCR       C1SBF         LL_PWR_IsActiveFlag_C1SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1SB(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1SBF) == (PWR_EXTSCR_C1SBF)) ? 1UL : 0UL);
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <LL_PWR_IsActiveFlag_C1SB+0x24>)
 800058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800059a:	d101      	bne.n	80005a0 <LL_PWR_IsActiveFlag_C1SB+0x18>
 800059c:	2301      	movs	r3, #1
 800059e:	e000      	b.n	80005a2 <LL_PWR_IsActiveFlag_C1SB+0x1a>
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	58000400 	.word	0x58000400

080005b0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	58000400 	.word	0x58000400

080005c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	619a      	str	r2, [r3, #24]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	4013      	ands	r3, r2
 8000612:	041a      	lsls	r2, r3, #16
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	43d9      	mvns	r1, r3
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	400b      	ands	r3, r1
 800061c:	431a      	orrs	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	619a      	str	r2, [r3, #24]
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	22ca      	movs	r2, #202	; 0xca
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2253      	movs	r2, #83	; 0x53
 8000656:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <LL_RTC_TIME_GetSecond>:
  *         RTC_TR           SU            LL_RTC_TIME_GetSecond
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <LL_RTC_WAKEUP_Enable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Enable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	619a      	str	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <LL_RTC_WAKEUP_Disable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Disable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Disable(RTC_TypeDef *RTCx)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	619a      	str	r2, [r3, #24]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f023 0207 	bic.w	r2, r3, #7
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	431a      	orrs	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	619a      	str	r2, [r3, #24]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <LL_RTC_WAKEUP_SetAutoReload>:
  * @param  RTCx RTC Instance
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	0c1b      	lsrs	r3, r3, #16
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	431a      	orrs	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	615a      	str	r2, [r3, #20]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <LL_RTC_BKP_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR19
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BKP_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8000700:	b480      	push	{r7}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  UNUSED(RTCx);

  tmp = (uint32_t)(&(TAMP->BKP0R));
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <LL_RTC_BKP_SetRegister+0x2c>)
 800070e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	4413      	add	r3, r2
 8000718:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	371c      	adds	r7, #28
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	4000b100 	.word	0x4000b100

08000730 <LL_RTC_BKP_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR18
  *         @arg @ref LL_RTC_BKP_DR19
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BKP_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  UNUSED(RTCx);

  tmp = (uint32_t)(&(TAMP->BKP0R));
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <LL_RTC_BKP_GetRegister+0x28>)
 800073c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	4413      	add	r3, r2
 8000746:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	681b      	ldr	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	4000b100 	.word	0x4000b100

0800075c <LL_RTC_CAL_LowPower_Enable>:
  * @rmtoll RTC_CALR         LPCAL          LL_RTC_CAL_LowPower_Enable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_CAL_LowPower_Enable(RTC_TypeDef *RTCx)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CALR, RTC_CALR_LPCAL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000768:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <LL_RTC_IsActiveFlag_RECALP>:
  * @rmtoll RTC_ICSR          RECALPF       LL_RTC_IsActiveFlag_RECALP
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RECALP(RTC_TypeDef *RTCx)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_RECALPF) == (RTC_ICSR_RECALPF)) ? 1U : 0U);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800078a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800078e:	d101      	bne.n	8000794 <LL_RTC_IsActiveFlag_RECALP+0x1a>
 8000790:	2301      	movs	r3, #1
 8000792:	e000      	b.n	8000796 <LL_RTC_IsActiveFlag_RECALP+0x1c>
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll RTC_ICSR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_RSF) == (RTC_ICSR_RSF)) ? 1U : 0U);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	f003 0320 	and.w	r3, r3, #32
 80007b0:	2b20      	cmp	r3, #32
 80007b2:	d101      	bne.n	80007b8 <LL_RTC_IsActiveFlag_RS+0x18>
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <LL_RTC_IsActiveFlag_RS+0x1a>
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <LL_RTC_ClearFlag_RS>:
  * @rmtoll RTC_ICSR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ICSR, (~((RTC_ICSR_RSF | RTC_ICSR_INIT) & 0x000000FFU) | (RTCx->ICSR & RTC_ICSR_INIT)));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d4:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	60da      	str	r2, [r3, #12]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <LL_RTC_IsActiveFlag_WUTW>:
  * @rmtoll RTC_ICSR          WUTWF         LL_RTC_IsActiveFlag_WUTW
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_WUTW(RTC_TypeDef *RTCx)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_WUTWF) == (RTC_ICSR_WUTWF)) ? 1U : 0U);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	d101      	bne.n	80007fe <LL_RTC_IsActiveFlag_WUTW+0x18>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <LL_RTC_IsActiveFlag_WUTW+0x1a>
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <LL_RTC_EnableIT_WUT>:
  * @rmtoll RTC_CR          WUTIE         LL_RTC_EnableIT_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	619a      	str	r2, [r3, #24]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082e:	2003      	movs	r0, #3
 8000830:	f7ff fccc 	bl	80001cc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f896 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 f8d2 	bl	80009e0 <MX_GPIO_Init>

  /* Uncomment to freeze the RTC during debug */
  //__DBGMCU_FREEZE_RTC();

  /* Check and handle if the system was resumed from StandBy mode */
  if (LL_PWR_IsActiveFlag_C1SB() != 1)
 800083c:	f7ff fea4 	bl	8000588 <LL_PWR_IsActiveFlag_C1SB>
 8000840:	4603      	mov	r3, r0
 8000842:	2b01      	cmp	r3, #1
 8000844:	d02a      	beq.n	800089c <main+0x74>
  {
    /* ##### Run after normal reset ##### */
    /* Configure RTC to use WUT */
    Configure_RTC();
 8000846:	f000 f8f5 	bl	8000a34 <Configure_RTC>

    /* Wait for RTC_TR shadow register to be updated with current time value */
    if (WaitForSynchro_RTC() != RTC_ERROR_NONE)
 800084a:	f000 f991 	bl	8000b70 <WaitForSynchro_RTC>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <main+0x30>
    {
      Error_Handler();
 8000854:	f000 f9a8 	bl	8000ba8 <Error_Handler>
    }
    seconds = (uint32_t)__LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8000858:	4840      	ldr	r0, [pc, #256]	; (800095c <main+0x134>)
 800085a:	f7ff ff02 	bl	8000662 <LL_RTC_TIME_GetSecond>
 800085e:	4603      	mov	r3, r0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	111b      	asrs	r3, r3, #4
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	0092      	lsls	r2, r2, #2
 8000870:	4413      	add	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	b2dc      	uxtb	r4, r3
 8000876:	4839      	ldr	r0, [pc, #228]	; (800095c <main+0x134>)
 8000878:	f7ff fef3 	bl	8000662 <LL_RTC_TIME_GetSecond>
 800087c:	4603      	mov	r3, r0
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 030f 	and.w	r3, r3, #15
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4423      	add	r3, r4
 8000888:	b2db      	uxtb	r3, r3
 800088a:	607b      	str	r3, [r7, #4]

    /* To ensure consistency between time and date, reading either RTC_SSR or RTC_TR locks the
     * values in the calendar shadow registers until RTC_DR is read.
     * Read RTC_DR in order to unlock the values in the calendar shadow registers */
    LL_RTC_ReadReg(RTC,DR);
 800088c:	4b33      	ldr	r3, [pc, #204]	; (800095c <main+0x134>)
 800088e:	685b      	ldr	r3, [r3, #4]

    /* As backup registers retain data in standby mode, one backup register is used
     * to store start time at the beginning of the test */
    LL_RTC_BKP_SetRegister(RTC, LL_RTC_BKP_DR0, seconds);
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	2100      	movs	r1, #0
 8000894:	4831      	ldr	r0, [pc, #196]	; (800095c <main+0x134>)
 8000896:	f7ff ff33 	bl	8000700 <LL_RTC_BKP_SetRegister>
 800089a:	e059      	b.n	8000950 <main+0x128>
  }
  else
  {
    /* ##### Run after standby mode ##### */
    /* Enable RTC APB clock  */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_RTCAPB);
 800089c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008a0:	f7ff fdf6 	bl	8000490 <LL_APB1_GRP1_EnableClock>
    /* Clear Standby flag */
    LL_PWR_ClearFlag_C1STOP_C1STB();
 80008a4:	f7ff fe84 	bl	80005b0 <LL_PWR_ClearFlag_C1STOP_C1STB>

    /* Use another backup register to count the number of times the CPU wakes up */
    LL_PWR_EnableBkUpAccess();
 80008a8:	f7ff fe4c 	bl	8000544 <LL_PWR_EnableBkUpAccess>
    uint32_t number_of_wakeup = LL_RTC_BKP_GetRegister(RTC, LL_RTC_BKP_DR1) + 1;
 80008ac:	2101      	movs	r1, #1
 80008ae:	482b      	ldr	r0, [pc, #172]	; (800095c <main+0x134>)
 80008b0:	f7ff ff3e 	bl	8000730 <LL_RTC_BKP_GetRegister>
 80008b4:	4603      	mov	r3, r0
 80008b6:	3301      	adds	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
    LL_RTC_BKP_SetRegister(RTC, LL_RTC_BKP_DR1, number_of_wakeup);
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	2101      	movs	r1, #1
 80008be:	4827      	ldr	r0, [pc, #156]	; (800095c <main+0x134>)
 80008c0:	f7ff ff1e 	bl	8000700 <LL_RTC_BKP_SetRegister>
    uint32_t start_time = LL_RTC_BKP_GetRegister(RTC, LL_RTC_BKP_DR0);    
 80008c4:	2100      	movs	r1, #0
 80008c6:	4825      	ldr	r0, [pc, #148]	; (800095c <main+0x134>)
 80008c8:	f7ff ff32 	bl	8000730 <LL_RTC_BKP_GetRegister>
 80008cc:	60b8      	str	r0, [r7, #8]

    /* Check that the current time is ok after 5 times the MCU woke up */
    if (number_of_wakeup == 5)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d13d      	bne.n	8000950 <main+0x128>
    {
      /* Wait for RTC_TR shadow register to be updated with current time value */
      if (WaitForSynchro_RTC() != RTC_ERROR_NONE)
 80008d4:	f000 f94c 	bl	8000b70 <WaitForSynchro_RTC>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <main+0xba>
      {
        Error_Handler();
 80008de:	f000 f963 	bl	8000ba8 <Error_Handler>
      }

      /* Get the RTC calendar time */
      seconds = (uint32_t)__LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80008e2:	481e      	ldr	r0, [pc, #120]	; (800095c <main+0x134>)
 80008e4:	f7ff febd 	bl	8000662 <LL_RTC_TIME_GetSecond>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	111b      	asrs	r3, r3, #4
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 030f 	and.w	r3, r3, #15
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	0092      	lsls	r2, r2, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	b2dc      	uxtb	r4, r3
 8000900:	4816      	ldr	r0, [pc, #88]	; (800095c <main+0x134>)
 8000902:	f7ff feae 	bl	8000662 <LL_RTC_TIME_GetSecond>
 8000906:	4603      	mov	r3, r0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4423      	add	r3, r4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	607b      	str	r3, [r7, #4]

        /* 15 seconds = 5 wakeup after 3 seconds */
      if (((seconds - start_time) == 15) || ((seconds + 60 - start_time) == 15))
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	2b0f      	cmp	r3, #15
 800091e:	d005      	beq.n	800092c <main+0x104>
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 800092a:	d10f      	bne.n	800094c <main+0x124>
      {
        /* Clear Backup reg */
        LL_RTC_BKP_SetRegister(RTC, LL_RTC_BKP_DR0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	480a      	ldr	r0, [pc, #40]	; (800095c <main+0x134>)
 8000932:	f7ff fee5 	bl	8000700 <LL_RTC_BKP_SetRegister>
        LL_RTC_BKP_SetRegister(RTC, LL_RTC_BKP_DR1, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2101      	movs	r1, #1
 800093a:	4808      	ldr	r0, [pc, #32]	; (800095c <main+0x134>)
 800093c:	f7ff fee0 	bl	8000700 <LL_RTC_BKP_SetRegister>

        /* the test is OK */
        LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <main+0x138>)
 8000946:	f7ff fe3f 	bl	80005c8 <LL_GPIO_SetOutputPin>
        while(1);
 800094a:	e7fe      	b.n	800094a <main+0x122>
      }
      else
      {
          Error_Handler();
 800094c:	f000 f92c 	bl	8000ba8 <Error_Handler>
    }

  }

  /* Enable wakeup timer and enter in standby mode */
  EnterStandbyMode();
 8000950:	f000 f8f6 	bl	8000b40 <EnterStandbyMode>
  /* This code will be never reached */
  Error_Handler();
 8000954:	f000 f928 	bl	8000ba8 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000958:	e7fe      	b.n	8000958 <main+0x130>
 800095a:	bf00      	nop
 800095c:	40002800 	.word	0x40002800
 8000960:	48000400 	.word	0x48000400

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000968:	2002      	movs	r0, #2
 800096a:	f7ff fda9 	bl	80004c0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800096e:	bf00      	nop
 8000970:	f7ff fdba 	bl	80004e8 <LL_FLASH_GetLatency>
 8000974:	4603      	mov	r3, r0
 8000976:	2b02      	cmp	r3, #2
 8000978:	d1fa      	bne.n	8000970 <SystemClock_Config+0xc>
  {
  }

  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800097a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800097e:	f7ff fdcd 	bl	800051c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8000982:	f7ff fc68 	bl	8000256 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000986:	bf00      	nop
 8000988:	f7ff fc73 	bl	8000272 <LL_RCC_MSI_IsReady>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d1fa      	bne.n	8000988 <SystemClock_Config+0x24>
  {
  }

  LL_RCC_MSI_EnableRangeSelection();
 8000992:	f7ff fc7e 	bl	8000292 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8000996:	20b0      	movs	r0, #176	; 0xb0
 8000998:	f7ff fc89 	bl	80002ae <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fc99 	bl	80002d4 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fcaa 	bl	80002fc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 80009a8:	bf00      	nop
 80009aa:	f7ff fcba 	bl	8000322 <LL_RCC_GetSysClkSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1fa      	bne.n	80009aa <SystemClock_Config+0x46>
  {
  }

  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fcbf 	bl	8000338 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAHB3Prescaler(LL_RCC_SYSCLK_DIV_1);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fccf 	bl	800035e <LL_RCC_SetAHB3Prescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff fce2 	bl	800038a <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fcf2 	bl	80003b0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(48000000);
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <SystemClock_Config+0x78>)
 80009ce:	f000 fe1d 	bl	800160c <LL_Init1msTick>

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(48000000);
 80009d2:	4802      	ldr	r0, [pc, #8]	; (80009dc <SystemClock_Config+0x78>)
 80009d4:	f000 fe4e 	bl	8001674 <LL_SetSystemCoreClock>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	02dc6c00 	.word	0x02dc6c00

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	463b      	mov	r3, r7
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
 80009f4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80009f6:	2002      	movs	r0, #2
 80009f8:	f7ff fd32 	bl	8000460 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 80009fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <MX_GPIO_Init+0x50>)
 8000a02:	f7ff fdee 	bl	80005e2 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8000a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <MX_GPIO_Init+0x50>)
 8000a22:	f000 fa44 	bl	8000eae <LL_GPIO_Init>

}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	48000400 	.word	0x48000400

08000a34 <Configure_RTC>:
  * Brief   This function configures RTC.
  * Param   None
  * Retval  None
  */
void Configure_RTC(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
  LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
  /* To change the source clock of the RTC feature (LSE, LSI), you have to:
     - Enable the power clock
     - Enable write access to configure the RTC clock source (to be done once after reset).
     - Reset the Back up Domain
     - Configure the needed RTC clock source */
  LL_PWR_EnableBkUpAccess();
 8000a52:	f7ff fd77 	bl	8000544 <LL_PWR_EnableBkUpAccess>
  LL_RCC_ForceBackupDomainReset();
 8000a56:	f7ff fce3 	bl	8000420 <LL_RCC_ForceBackupDomainReset>
  LL_RCC_ReleaseBackupDomainReset();
 8000a5a:	f7ff fcf1 	bl	8000440 <LL_RCC_ReleaseBackupDomainReset>

  /*##-2- Configure LSE/LSI as RTC clock source ###############################*/
#ifdef RTC_CLOCK_SOURCE_LSE
  /* Enable LSE only if disabled.*/
  if (LL_RCC_LSE_IsReady() == 0)
 8000a5e:	f7ff fbe9 	bl	8000234 <LL_RCC_LSE_IsReady>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d10d      	bne.n	8000a84 <Configure_RTC+0x50>
  {

    LL_RCC_LSE_Enable();
 8000a68:	f7ff fbd4 	bl	8000214 <LL_RCC_LSE_Enable>
#if (USE_TIMEOUT == 1)
    Timeout = LSE_TIMEOUT_VALUE;
#endif /* USE_TIMEOUT */
    while (LL_RCC_LSE_IsReady() != 1)
 8000a6c:	bf00      	nop
 8000a6e:	f7ff fbe1 	bl	8000234 <LL_RCC_LSE_IsReady>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d1fa      	bne.n	8000a6e <Configure_RTC+0x3a>
        /* LSE activation error */
        Error_Handler();
      }
#endif /* USE_TIMEOUT */
    }
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8000a78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a7c:	f7ff fcab 	bl	80003d6 <LL_RCC_SetRTCClockSource>

    /*##-3- Enable RTC peripheral Clocks #######################################*/
    /* Enable RTC Clock */
    LL_RCC_EnableRTC();
 8000a80:	f7ff fcbe 	bl	8000400 <LL_RCC_EnableRTC>
#error "configure clock for RTC"
#endif

  /*##-4- Configure RTC ######################################################*/
/* Enable RTC APB clock  */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_RTCAPB);
 8000a84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a88:	f7ff fd02 	bl	8000490 <LL_APB1_GRP1_EnableClock>
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000a8c:	482a      	ldr	r0, [pc, #168]	; (8000b38 <Configure_RTC+0x104>)
 8000a8e:	f7ff fdd9 	bl	8000644 <LL_RTC_DisableWriteProtection>

  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_AMPM;
 8000a92:	2340      	movs	r3, #64	; 0x40
 8000a94:	60fb      	str	r3, [r7, #12]
  RTC_InitStruct.AsynchPrescaler = RTC_ASYNCH_PREDIV;
 8000a96:	237f      	movs	r3, #127	; 0x7f
 8000a98:	613b      	str	r3, [r7, #16]
  RTC_InitStruct.SynchPrescaler = RTC_SYNCH_PREDIV;
 8000a9a:	23ff      	movs	r3, #255	; 0xff
 8000a9c:	617b      	str	r3, [r7, #20]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4824      	ldr	r0, [pc, #144]	; (8000b38 <Configure_RTC+0x104>)
 8000aa6:	f000 fb99 	bl	80011dc <LL_RTC_Init>
  RTC_TimeStruct.TimeFormat = LL_RTC_TIME_FORMAT_PM;
 8000aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aae:	607b      	str	r3, [r7, #4]
  RTC_TimeStruct.Hours = 10;
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	723b      	strb	r3, [r7, #8]
  RTC_TimeStruct.Minutes = 50;
 8000ab4:	2332      	movs	r3, #50	; 0x32
 8000ab6:	727b      	strb	r3, [r7, #9]
  RTC_TimeStruct.Seconds = 40;
 8000ab8:	2328      	movs	r3, #40	; 0x28
 8000aba:	72bb      	strb	r3, [r7, #10]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	461a      	mov	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	481d      	ldr	r0, [pc, #116]	; (8000b38 <Configure_RTC+0x104>)
 8000ac4:	f000 fbba 	bl	800123c <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	703b      	strb	r3, [r7, #0]
  RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 8000acc:	2301      	movs	r3, #1
 8000ace:	707b      	strb	r3, [r7, #1]
  RTC_DateStruct.Year = 20;
 8000ad0:	2314      	movs	r3, #20
 8000ad2:	70fb      	strb	r3, [r7, #3]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4817      	ldr	r0, [pc, #92]	; (8000b38 <Configure_RTC+0x104>)
 8000adc:	f000 fc54 	bl	8001388 <LL_RTC_DATE_Init>

  /* Wait until it is allowed to Enable Calibration Low Power */
  while (LL_RTC_IsActiveFlag_RECALP(RTC) != 0){}
 8000ae0:	bf00      	nop
 8000ae2:	4815      	ldr	r0, [pc, #84]	; (8000b38 <Configure_RTC+0x104>)
 8000ae4:	f7ff fe49 	bl	800077a <LL_RTC_IsActiveFlag_RECALP>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f9      	bne.n	8000ae2 <Configure_RTC+0xae>

  /* Enable Calibration Low Power */
  LL_RTC_CAL_LowPower_Enable(RTC);
 8000aee:	4812      	ldr	r0, [pc, #72]	; (8000b38 <Configure_RTC+0x104>)
 8000af0:	f7ff fe34 	bl	800075c <LL_RTC_CAL_LowPower_Enable>

/*##-5- Configure the wakeup Timer WUT ##########################################*/
  /* Disable wake up timer to modify it */
  LL_RTC_WAKEUP_Disable(RTC);
 8000af4:	4810      	ldr	r0, [pc, #64]	; (8000b38 <Configure_RTC+0x104>)
 8000af6:	f7ff fdd0 	bl	800069a <LL_RTC_WAKEUP_Disable>
  /* Wait until it is allow to modify wake up reload value */
#if (USE_TIMEOUT == 1)
  Timeout = RTC_TIMEOUT_VALUE;
#endif /* USE_TIMEOUT */

  while (LL_RTC_IsActiveFlag_WUTW(RTC) != 1)
 8000afa:	bf00      	nop
 8000afc:	480e      	ldr	r0, [pc, #56]	; (8000b38 <Configure_RTC+0x104>)
 8000afe:	f7ff fe72 	bl	80007e6 <LL_RTC_IsActiveFlag_WUTW>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d1f9      	bne.n	8000afc <Configure_RTC+0xc8>
    }
#endif /* USE_TIMEOUT */
  }

  /* Configure wakeup timer clock source: RTC/2 clock is selected  */
  LL_RTC_WAKEUP_SetClock(RTC, LL_RTC_WAKEUPCLOCK_DIV_16);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <Configure_RTC+0x104>)
 8000b0c:	f7ff fdd4 	bl	80006b8 <LL_RTC_WAKEUP_SetClock>
   * Wakeup timer auto-reload value (WUT[15:0] in RTC_WUTR) is calculated as follow:
   * If LSE is used as RTC clock source and RTC/2 clock is selected (prescaler = 2): auto-reload = (3u * (32768u / 2u)) - 1 = 49151.
   * If LSI is used as RTC clock source and RTC/2 clock is selected (prescaler = 2): auto-reload = (3u * (32000u / 2u)) - 1 = 47999.   
   * Wakeup auto-reload output clear value (WUTOCLR[15:0] in RTC_WUTR) is set in order to
   * automatically clear wakeup timer flag (WUTF) by hardware.(Please refer to reference manual for further details)*/
  LL_RTC_WAKEUP_SetAutoReload(RTC, (uint32_t)(RTC_WUT_TIME | (RTC_WUT_TIME << RTC_WUTR_WUTOCLR_Pos)));
 8000b10:	f06f 2140 	mvn.w	r1, #1073758208	; 0x40004000
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <Configure_RTC+0x104>)
 8000b16:	f7ff fde1 	bl	80006dc <LL_RTC_WAKEUP_SetAutoReload>

  /* As Wake up auto clear value (WUTOCLR) is set, we configure EXTI as EVENT instead of Interrupt
     to avoid useless IRQ handler execution.*/
  __LL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <Configure_RTC+0x108>)
 8000b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <Configure_RTC+0x108>)
 8000b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <Configure_RTC+0x104>)
 8000b2c:	f7ff fd7e 	bl	800062c <LL_RTC_EnableWriteProtection>

}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40002800 	.word	0x40002800
 8000b3c:	58000800 	.word	0x58000800

08000b40 <EnterStandbyMode>:
  * @brief  Function to configure and enter in STANDBY Mode.
  * @param  None
  * @retval None
  */
void EnterStandbyMode(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* ######## ENABLE WUT #################################################*/
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <EnterStandbyMode+0x2c>)
 8000b46:	f7ff fd7d 	bl	8000644 <LL_RTC_DisableWriteProtection>

  /* Enable wake up counter and wake up interrupt */
  /* Note: Periodic wakeup interrupt should be enabled to exit the device
     from low-power modes.*/
  LL_RTC_EnableIT_WUT(RTC);
 8000b4a:	4808      	ldr	r0, [pc, #32]	; (8000b6c <EnterStandbyMode+0x2c>)
 8000b4c:	f7ff fe5d 	bl	800080a <LL_RTC_EnableIT_WUT>
  LL_RTC_WAKEUP_Enable(RTC);
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <EnterStandbyMode+0x2c>)
 8000b52:	f7ff fd93 	bl	800067c <LL_RTC_WAKEUP_Enable>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <EnterStandbyMode+0x2c>)
 8000b58:	f7ff fd68 	bl	800062c <LL_RTC_EnableWriteProtection>
    * Following procedure describe in STM32WLxx Reference Manual
    * See PWR part, section Low-power modes, Standby mode
    */

  /* Set Standby mode */
  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f7ff fcff 	bl	8000560 <LL_PWR_SetPowerMode>
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  LL_LPM_EnableDeepSleep();
 8000b62:	f7ff fccd 	bl	8000500 <LL_LPM_EnableDeepSleep>
#if defined ( __CC_ARM)
  __force_stores();
#endif

  /* Request Wait For Interrupt */
  __WFI();
 8000b66:	bf30      	wfi
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40002800 	.word	0x40002800

08000b70 <WaitForSynchro_RTC>:
  * @param  None
  * @retval RTC_ERROR_NONE if no error occurs
  *         RTC_ERROR_TIMEOUT if synchronization fails
  */
uint32_t WaitForSynchro_RTC(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  uint32_t status = RTC_ERROR_NONE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]

  /* Disable RTC registers write protection to allow clearing the RSF flag */
  LL_RTC_DisableWriteProtection(RTC);
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <WaitForSynchro_RTC+0x34>)
 8000b7c:	f7ff fd62 	bl	8000644 <LL_RTC_DisableWriteProtection>

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTC);
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <WaitForSynchro_RTC+0x34>)
 8000b82:	f7ff fe1f 	bl	80007c4 <LL_RTC_ClearFlag_RS>
#if (USE_TIMEOUT == 1)
  Timeout = RTC_TIMEOUT_VALUE;
#endif /* USE_TIMEOUT */

  /* Wait the registers to be synchronised */
  while (LL_RTC_IsActiveFlag_RS(RTC) != 1)
 8000b86:	bf00      	nop
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <WaitForSynchro_RTC+0x34>)
 8000b8a:	f7ff fe09 	bl	80007a0 <LL_RTC_IsActiveFlag_RS>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d1f9      	bne.n	8000b88 <WaitForSynchro_RTC+0x18>
    }
#endif /* USE_TIMEOUT */
  }

  /* Set back RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <WaitForSynchro_RTC+0x34>)
 8000b96:	f7ff fd49 	bl	800062c <LL_RTC_EnableWriteProtection>

  return status;
 8000b9a:	687b      	ldr	r3, [r7, #4]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40002800 	.word	0x40002800

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
  {
    LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <Error_Handler+0x18>)
 8000bb2:	f7ff fd23 	bl	80005fc <LL_GPIO_TogglePin>
    LL_mDelay(100);
 8000bb6:	2064      	movs	r0, #100	; 0x64
 8000bb8:	f000 fd36 	bl	8001628 <LL_mDelay>
    LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000bbc:	e7f6      	b.n	8000bac <Error_Handler+0x4>
 8000bbe:	bf00      	nop
 8000bc0:	48000400 	.word	0x48000400

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <BusFault_Handler+0x4>

08000be2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <UsageFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <LL_GPIO_SetPinMode>:
{
 8000c24:	b480      	push	{r7}
 8000c26:	b08b      	sub	sp, #44	; 0x2c
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa93 f3a3 	rbit	r3, r3
 8000c3e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000c4a:	2320      	movs	r3, #32
 8000c4c:	e003      	b.n	8000c56 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2103      	movs	r1, #3
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	401a      	ands	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	fa93 f3a3 	rbit	r3, r3
 8000c6c:	61fb      	str	r3, [r7, #28]
  return result;
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000c78:	2320      	movs	r3, #32
 8000c7a:	e003      	b.n	8000c84 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	fab3 f383 	clz	r3, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	601a      	str	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	372c      	adds	r7, #44	; 0x2c
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <LL_GPIO_SetPinOutputType>:
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	fb01 f303 	mul.w	r3, r1, r3
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	605a      	str	r2, [r3, #4]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <LL_GPIO_SetPinSpeed>:
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b08b      	sub	sp, #44	; 0x2c
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	613b      	str	r3, [r7, #16]
  return result;
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	e003      	b.n	8000cfc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fab3 f383 	clz	r3, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2103      	movs	r1, #3
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	fa93 f3a3 	rbit	r3, r3
 8000d12:	61fb      	str	r3, [r7, #28]
  return result;
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000d1e:	2320      	movs	r3, #32
 8000d20:	e003      	b.n	8000d2a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	fab3 f383 	clz	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	431a      	orrs	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	609a      	str	r2, [r3, #8]
}
 8000d38:	bf00      	nop
 8000d3a:	372c      	adds	r7, #44	; 0x2c
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <LL_GPIO_SetPinPull>:
{
 8000d42:	b480      	push	{r7}
 8000d44:	b08b      	sub	sp, #44	; 0x2c
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa93 f3a3 	rbit	r3, r3
 8000d5c:	613b      	str	r3, [r7, #16]
  return result;
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000d68:	2320      	movs	r3, #32
 8000d6a:	e003      	b.n	8000d74 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fab3 f383 	clz	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2103      	movs	r1, #3
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	401a      	ands	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	fa93 f3a3 	rbit	r3, r3
 8000d8a:	61fb      	str	r3, [r7, #28]
  return result;
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000d96:	2320      	movs	r3, #32
 8000d98:	e003      	b.n	8000da2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	fab3 f383 	clz	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	431a      	orrs	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	60da      	str	r2, [r3, #12]
}
 8000db0:	bf00      	nop
 8000db2:	372c      	adds	r7, #44	; 0x2c
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr

08000dba <LL_GPIO_SetAFPin_0_7>:
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b08b      	sub	sp, #44	; 0x2c
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6a1a      	ldr	r2, [r3, #32]
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa93 f3a3 	rbit	r3, r3
 8000dd4:	613b      	str	r3, [r7, #16]
  return result;
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000de0:	2320      	movs	r3, #32
 8000de2:	e003      	b.n	8000dec <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fab3 f383 	clz	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	210f      	movs	r1, #15
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	401a      	ands	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	61fb      	str	r3, [r7, #28]
  return result;
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000e0e:	2320      	movs	r3, #32
 8000e10:	e003      	b.n	8000e1a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	fab3 f383 	clz	r3, r3
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	6879      	ldr	r1, [r7, #4]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	431a      	orrs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	621a      	str	r2, [r3, #32]
}
 8000e28:	bf00      	nop
 8000e2a:	372c      	adds	r7, #44	; 0x2c
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <LL_GPIO_SetAFPin_8_15>:
{
 8000e32:	b480      	push	{r7}
 8000e34:	b08b      	sub	sp, #44	; 0x2c
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa93 f3a3 	rbit	r3, r3
 8000e4e:	613b      	str	r3, [r7, #16]
  return result;
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	e003      	b.n	8000e66 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	fab3 f383 	clz	r3, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	210f      	movs	r1, #15
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	401a      	ands	r2, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	fa93 f3a3 	rbit	r3, r3
 8000e7e:	61fb      	str	r3, [r7, #28]
  return result;
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	e003      	b.n	8000e96 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	fab3 f383 	clz	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ea4:	bf00      	nop
 8000ea6:	372c      	adds	r7, #44	; 0x2c
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b088      	sub	sp, #32
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
#if defined(CORE_CM0PLUS)
  pinpos = 0;
#else
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	fa93 f3a3 	rbit	r3, r3
 8000ec4:	60fb      	str	r3, [r7, #12]
  return result;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <LL_GPIO_Init+0x26>
    return 32U;
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	e003      	b.n	8000edc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fab3 f383 	clz	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	61fb      	str	r3, [r7, #28]
#endif /* CORE_CM0PLUS */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000ede:	e04e      	b.n	8000f7e <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d040      	beq.n	8000f78 <LL_GPIO_Init+0xca>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	461a      	mov	r2, r3
 8000efc:	69b9      	ldr	r1, [r7, #24]
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fe90 	bl	8000c24 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d003      	beq.n	8000f14 <LL_GPIO_Init+0x66>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d10d      	bne.n	8000f30 <LL_GPIO_Init+0x82>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	69b9      	ldr	r1, [r7, #24]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fed4 	bl	8000cca <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	461a      	mov	r2, r3
 8000f28:	69b9      	ldr	r1, [r7, #24]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff feb6 	bl	8000c9c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	461a      	mov	r2, r3
 8000f36:	69b9      	ldr	r1, [r7, #24]
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff02 	bl	8000d42 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d111      	bne.n	8000f6a <LL_GPIO_Init+0xbc>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2bff      	cmp	r3, #255	; 0xff
 8000f4a:	d807      	bhi.n	8000f5c <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	461a      	mov	r2, r3
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff30 	bl	8000dba <LL_GPIO_SetAFPin_0_7>
 8000f5a:	e006      	b.n	8000f6a <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	461a      	mov	r2, r3
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff64 	bl	8000e32 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	69b9      	ldr	r1, [r7, #24]
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fe56 	bl	8000c24 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa22 f303 	lsr.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1a9      	bne.n	8000ee0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8000f8c:	2301      	movs	r3, #1
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <LL_RTC_SetHourFormat>:
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <LL_RTC_GetHourFormat>:
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <LL_RTC_EnableInitMode>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	60da      	str	r2, [r3, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <LL_RTC_DisableInitMode>:
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60da      	str	r2, [r3, #12]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <LL_RTC_IsShadowRegBypassEnabled>:
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD)) ? 1U : 0U);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	2b20      	cmp	r3, #32
 8001022:	d101      	bne.n	8001028 <LL_RTC_IsShadowRegBypassEnabled+0x18>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <LL_RTC_IsShadowRegBypassEnabled+0x1a>
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <LL_RTC_SetAsynchPrescaler>:
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	611a      	str	r2, [r3, #16]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <LL_RTC_SetSynchPrescaler>:
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800106c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	611a      	str	r2, [r3, #16]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <LL_RTC_EnableWriteProtection>:
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <LL_RTC_DisableWriteProtection>:
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	22ca      	movs	r2, #202	; 0xca
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2253      	movs	r2, #83	; 0x53
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <LL_RTC_TIME_Config>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 80010d8:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 80010de:	4313      	orrs	r3, r2
 80010e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 80010ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	431a      	orrs	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	601a      	str	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <LL_RTC_DATE_Config>:
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	041b      	lsls	r3, r3, #16
 8001116:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 800111a:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001122:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001128:	4313      	orrs	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <LL_RTC_DATE_Config+0x48>)
 8001132:	4013      	ands	r3, r2
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	431a      	orrs	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	605a      	str	r2, [r3, #4]
}
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	ff0000c0 	.word	0xff0000c0

0800114c <LL_RTC_IsActiveFlag_INIT>:
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_INITF) == (RTC_ICSR_INITF)) ? 1U : 0U);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115c:	2b40      	cmp	r3, #64	; 0x40
 800115e:	d101      	bne.n	8001164 <LL_RTC_IsActiveFlag_INIT+0x18>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <LL_RTC_IsActiveFlag_INIT+0x1a>
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <LL_RTC_IsActiveFlag_RS>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_RSF) == (RTC_ICSR_RSF)) ? 1U : 0U);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	2b20      	cmp	r3, #32
 8001182:	d101      	bne.n	8001188 <LL_RTC_IsActiveFlag_RS+0x18>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <LL_RTC_IsActiveFlag_RS+0x1a>
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <LL_RTC_ClearFlag_RS>:
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ICSR, (~((RTC_ICSR_RSF | RTC_ICSR_INIT) & 0x000000FFU) | (RTCx->ICSR & RTC_ICSR_INIT)));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a4:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	60da      	str	r2, [r3, #12]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
	...

080011b8 <LL_SYSTICK_IsActiveCounterFlag>:
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c8:	d101      	bne.n	80011ce <LL_SYSTICK_IsActiveCounterFlag+0x16>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <LL_SYSTICK_IsActiveCounterFlag+0x18>
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	e000e010 	.word	0xe000e010

080011dc <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff55 	bl	800109a <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f96d 	bl	80014d0 <LL_RTC_EnterInitMode>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d016      	beq.n	800122a <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fec7 	bl	8000f96 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4619      	mov	r1, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ff23 	bl	800105a <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff0a 	bl	8001034 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fee6 	bl	8000ff2 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8001226:	2301      	movs	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff29 	bl	8001082 <LL_RTC_EnableWriteProtection>

  return status;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8001248:	2300      	movs	r3, #0
 800124a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff feb1 	bl	8000fba <LL_RTC_GetHourFormat>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e008      	b.n	8001278 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff fea7 	bl	8000fba <LL_RTC_GetHourFormat>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff ff0e 	bl	800109a <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 f926 	bl	80014d0 <LL_RTC_EnterInitMode>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d073      	beq.n	8001372 <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00f      	beq.n	80012b0 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 800129e:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	4603      	mov	r3, r0
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f7ff ff05 	bl	80010b8 <LL_RTC_TIME_Config>
 80012ae:	e04f      	b.n	8001350 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681c      	ldr	r4, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	4a32      	ldr	r2, [pc, #200]	; (8001384 <LL_RTC_TIME_Init+0x148>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	08db      	lsrs	r3, r3, #3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	b2d8      	uxtb	r0, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	791a      	ldrb	r2, [r3, #4]
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <LL_RTC_TIME_Init+0x148>)
 80012cc:	fba3 1302 	umull	r1, r3, r3, r2
 80012d0:	08d9      	lsrs	r1, r3, #3
 80012d2:	460b      	mov	r3, r1
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4303      	orrs	r3, r0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	795b      	ldrb	r3, [r3, #5]
 80012e8:	4a26      	ldr	r2, [pc, #152]	; (8001384 <LL_RTC_TIME_Init+0x148>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	b2d8      	uxtb	r0, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	795a      	ldrb	r2, [r3, #5]
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <LL_RTC_TIME_Init+0x148>)
 80012fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001300:	08d9      	lsrs	r1, r3, #3
 8001302:	460b      	mov	r3, r1
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4303      	orrs	r3, r0
 8001310:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8001312:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	799b      	ldrb	r3, [r3, #6]
 8001318:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <LL_RTC_TIME_Init+0x148>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	08db      	lsrs	r3, r3, #3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	b2d8      	uxtb	r0, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	799a      	ldrb	r2, [r3, #6]
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <LL_RTC_TIME_Init+0x148>)
 800132c:	fba3 1302 	umull	r1, r3, r3, r2
 8001330:	08d9      	lsrs	r1, r3, #3
 8001332:	460b      	mov	r3, r1
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4303      	orrs	r3, r0
 8001340:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4633      	mov	r3, r6
 8001346:	462a      	mov	r2, r5
 8001348:	4621      	mov	r1, r4
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff feb4 	bl	80010b8 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f7ff fe4e 	bl	8000ff2 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f7ff fe5a 	bl	8001010 <LL_RTC_IsShadowRegBypassEnabled>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d105      	bne.n	800136e <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f8e7 	bl	8001536 <LL_RTC_WaitForSynchro>
 8001368:	4603      	mov	r3, r0
 800136a:	75fb      	strb	r3, [r7, #23]
 800136c:	e001      	b.n	8001372 <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 800136e:	2301      	movs	r3, #1
 8001370:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff fe85 	bl	8001082 <LL_RTC_EnableWriteProtection>

  return status;
 8001378:	7dfb      	ldrb	r3, [r7, #23]
}
 800137a:	4618      	mov	r0, r3
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	cccccccd 	.word	0xcccccccd

08001388 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af02      	add	r7, sp, #8
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8001394:	2300      	movs	r3, #0
 8001396:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10e      	bne.n	80013bc <LL_RTC_DATE_Init+0x34>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	785b      	ldrb	r3, [r3, #1]
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (uint8_t)(((uint32_t) RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	785b      	ldrb	r3, [r3, #1]
 80013ae:	f023 0310 	bic.w	r3, r3, #16
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	330a      	adds	r3, #10
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f7ff fe6c 	bl	800109a <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 f884 	bl	80014d0 <LL_RTC_EnterInitMode>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d075      	beq.n	80014ba <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d010      	beq.n	80013f6 <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	4618      	mov	r0, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	78db      	ldrb	r3, [r3, #3]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4603      	mov	r3, r0
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff fe86 	bl	8001100 <LL_RTC_DATE_Config>
 80013f4:	e050      	b.n	8001498 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461c      	mov	r4, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	789b      	ldrb	r3, [r3, #2]
 8001400:	4a32      	ldr	r2, [pc, #200]	; (80014cc <LL_RTC_DATE_Init+0x144>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	b2d8      	uxtb	r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	789a      	ldrb	r2, [r3, #2]
 8001412:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <LL_RTC_DATE_Init+0x144>)
 8001414:	fba3 1302 	umull	r1, r3, r3, r2
 8001418:	08d9      	lsrs	r1, r3, #3
 800141a:	460b      	mov	r3, r1
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4303      	orrs	r3, r0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	785b      	ldrb	r3, [r3, #1]
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <LL_RTC_DATE_Init+0x144>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	b2d8      	uxtb	r0, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	785a      	ldrb	r2, [r3, #1]
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <LL_RTC_DATE_Init+0x144>)
 8001444:	fba3 1302 	umull	r1, r3, r3, r2
 8001448:	08d9      	lsrs	r1, r3, #3
 800144a:	460b      	mov	r3, r1
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4303      	orrs	r3, r0
 8001458:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800145a:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	78db      	ldrb	r3, [r3, #3]
 8001460:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <LL_RTC_DATE_Init+0x144>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	08db      	lsrs	r3, r3, #3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	b2d8      	uxtb	r0, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	78da      	ldrb	r2, [r3, #3]
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <LL_RTC_DATE_Init+0x144>)
 8001474:	fba3 1302 	umull	r1, r3, r3, r2
 8001478:	08d9      	lsrs	r1, r3, #3
 800147a:	460b      	mov	r3, r1
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4303      	orrs	r3, r0
 8001488:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	4633      	mov	r3, r6
 800148e:	462a      	mov	r2, r5
 8001490:	4621      	mov	r1, r4
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7ff fe34 	bl	8001100 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff fdaa 	bl	8000ff2 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff fdb6 	bl	8001010 <LL_RTC_IsShadowRegBypassEnabled>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f843 	bl	8001536 <LL_RTC_WaitForSynchro>
 80014b0:	4603      	mov	r3, r0
 80014b2:	75fb      	strb	r3, [r7, #23]
 80014b4:	e001      	b.n	80014ba <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7ff fde1 	bl	8001082 <LL_RTC_EnableWriteProtection>

  return status;
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ca:	bf00      	nop
 80014cc:	cccccccd 	.word	0xcccccccd

080014d0 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80014d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014dc:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fe32 	bl	800114c <LL_RTC_IsActiveFlag_INIT>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11e      	bne.n	800152c <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fd70 	bl	8000fd4 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff fe29 	bl	800114c <LL_RTC_IsActiveFlag_INIT>
 80014fa:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80014fc:	e010      	b.n	8001520 <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80014fe:	f7ff fe5b 	bl	80011b8 <LL_SYSTICK_IsActiveCounterFlag>
 8001502:	4603      	mov	r3, r0
 8001504:	2b01      	cmp	r3, #1
 8001506:	d102      	bne.n	800150e <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3b01      	subs	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fe1c 	bl	800114c <LL_RTC_IsActiveFlag_INIT>
 8001514:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 800151c:	2300      	movs	r3, #0
 800151e:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <LL_RTC_EnterInitMode+0x5c>
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d1e8      	bne.n	80014fe <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 800152c:	7dfb      	ldrb	r3, [r7, #23]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001544:	2301      	movs	r3, #1
 8001546:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fe23 	bl	8001194 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fe0e 	bl	8001170 <LL_RTC_IsActiveFlag_RS>
 8001554:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 8001556:	e010      	b.n	800157a <LL_RTC_WaitForSynchro+0x44>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001558:	f7ff fe2e 	bl	80011b8 <LL_SYSTICK_IsActiveCounterFlag>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d102      	bne.n	8001568 <LL_RTC_WaitForSynchro+0x32>
    {
      timeout--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3b01      	subs	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fe01 	bl	8001170 <LL_RTC_IsActiveFlag_RS>
 800156e:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <LL_RTC_WaitForSynchro+0x44>
    {
      status = ERROR;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <LL_RTC_WaitForSynchro+0x50>
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1e8      	bne.n	8001558 <LL_RTC_WaitForSynchro+0x22>
    }
  }

  if (status != ERROR)
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01e      	beq.n	80015ca <LL_RTC_WaitForSynchro+0x94>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 800158c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001590:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fdec 	bl	8001170 <LL_RTC_IsActiveFlag_RS>
 8001598:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 800159a:	e010      	b.n	80015be <LL_RTC_WaitForSynchro+0x88>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800159c:	f7ff fe0c 	bl	80011b8 <LL_SYSTICK_IsActiveCounterFlag>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d102      	bne.n	80015ac <LL_RTC_WaitForSynchro+0x76>
      {
        timeout--;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fddf 	bl	8001170 <LL_RTC_IsActiveFlag_RS>
 80015b2:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <LL_RTC_WaitForSynchro+0x88>
      {
        status = ERROR;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <LL_RTC_WaitForSynchro+0x94>
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d1e8      	bne.n	800159c <LL_RTC_WaitForSynchro+0x66>
      }
    }
  }

  return (status);
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <LL_InitTick>:
  * @param  Ticks Number of ticks
  * @retval None
  */
#endif /* CORE_CM0PLUS */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  if (Ticks > 0U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00c      	beq.n	80015fe <LL_InitTick+0x2a>
  {
    /* Configure the SysTick to have interrupt in 1ms time base */
    SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <LL_InitTick+0x34>)
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
    SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <LL_InitTick+0x34>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <LL_InitTick+0x34>)
 80015fa:	2205      	movs	r2, #5
 80015fc:	601a      	str	r2, [r3, #0]
                     SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	e000e010 	.word	0xe000e010

0800160c <LL_Init1msTick>:
    *         (HCLK1_Frequency field)
    * @retval None
    */
#endif /* CORE_CM0PLUS */
  void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000);
 8001614:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffdb 	bl	80015d4 <LL_InitTick>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <LL_mDelay+0x48>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay;
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001636:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001642:	d00c      	beq.n	800165e <LL_mDelay+0x36>
  {
    tmpDelay ++;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 800164a:	e008      	b.n	800165e <LL_mDelay+0x36>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <LL_mDelay+0x48>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <LL_mDelay+0x36>
    {
      tmpDelay --;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3b01      	subs	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f3      	bne.n	800164c <LL_mDelay+0x24>
    }
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	e000e010 	.word	0xe000e010

08001674 <LL_SetSystemCoreClock>:
            @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field))
  * @retval None
  */
#endif /* CORE_CM0PLUS */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800167c:	4a03      	ldr	r2, [pc, #12]	; (800168c <LL_SetSystemCoreClock+0x18>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000000 	.word	0x20000000

08001690 <__libc_init_array>:
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	4d0d      	ldr	r5, [pc, #52]	; (80016c8 <__libc_init_array+0x38>)
 8001694:	4c0d      	ldr	r4, [pc, #52]	; (80016cc <__libc_init_array+0x3c>)
 8001696:	1b64      	subs	r4, r4, r5
 8001698:	10a4      	asrs	r4, r4, #2
 800169a:	2600      	movs	r6, #0
 800169c:	42a6      	cmp	r6, r4
 800169e:	d109      	bne.n	80016b4 <__libc_init_array+0x24>
 80016a0:	4d0b      	ldr	r5, [pc, #44]	; (80016d0 <__libc_init_array+0x40>)
 80016a2:	4c0c      	ldr	r4, [pc, #48]	; (80016d4 <__libc_init_array+0x44>)
 80016a4:	f000 f818 	bl	80016d8 <_init>
 80016a8:	1b64      	subs	r4, r4, r5
 80016aa:	10a4      	asrs	r4, r4, #2
 80016ac:	2600      	movs	r6, #0
 80016ae:	42a6      	cmp	r6, r4
 80016b0:	d105      	bne.n	80016be <__libc_init_array+0x2e>
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
 80016b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016b8:	4798      	blx	r3
 80016ba:	3601      	adds	r6, #1
 80016bc:	e7ee      	b.n	800169c <__libc_init_array+0xc>
 80016be:	f855 3b04 	ldr.w	r3, [r5], #4
 80016c2:	4798      	blx	r3
 80016c4:	3601      	adds	r6, #1
 80016c6:	e7f2      	b.n	80016ae <__libc_init_array+0x1e>
 80016c8:	080016f0 	.word	0x080016f0
 80016cc:	080016f0 	.word	0x080016f0
 80016d0:	080016f0 	.word	0x080016f0
 80016d4:	080016f4 	.word	0x080016f4

080016d8 <_init>:
 80016d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016da:	bf00      	nop
 80016dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016de:	bc08      	pop	{r3}
 80016e0:	469e      	mov	lr, r3
 80016e2:	4770      	bx	lr

080016e4 <_fini>:
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e6:	bf00      	nop
 80016e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ea:	bc08      	pop	{r3}
 80016ec:	469e      	mov	lr, r3
 80016ee:	4770      	bx	lr
