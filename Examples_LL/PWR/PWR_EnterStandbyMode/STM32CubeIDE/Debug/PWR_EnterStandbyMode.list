
PWR_EnterStandbyMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f28  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001060  08001060  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001060  08001060  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001060  08001060  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001060  08001060  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001060  08001060  00011060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001068  08001068  00011068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  08001078  00020008  2**2
                  ALLOC
 10 RAM1_region   00000000  20000028  20000028  00020008  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020008  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000028  20000028  00020028  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 14 .debug_line   00002ec4  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00003d0e  00000000  00000000  00022ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000af1  00000000  00000000  00026c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000430  00000000  00000000  000276f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007166f  00000000  00000000  00027b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000003d8  00000000  00000000  00099198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00013cd5  00000000  00000000  00099570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  000ad245  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001058  00000000  00000000  000ad298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000008 	.word	0x20000008
 8000154:	00000000 	.word	0x00000000
 8000158:	08001044 	.word	0x08001044

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000000c 	.word	0x2000000c
 8000174:	08001044 	.word	0x08001044

08000178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800017c:	f000 fd21 	bl	8000bc2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480c      	ldr	r0, [pc, #48]	; (80001b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490d      	ldr	r1, [pc, #52]	; (80001b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0a      	ldr	r4, [pc, #40]	; (80001c4 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001a6:	f000 ff29 	bl	8000ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001aa:	f000 fb97 	bl	80008dc <main>

080001ae <LoopForever>:

LoopForever:
    b LoopForever
 80001ae:	e7fe      	b.n	80001ae <LoopForever>
  ldr   r0, =_estack
 80001b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80001b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80001bc:	08001070 	.word	0x08001070
  ldr r2, =_sbss
 80001c0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80001c4:	20000028 	.word	0x20000028

080001c8 <ADC_IRQHandler>:
  * @retval : None
  */
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c8:	e7fe      	b.n	80001c8 <ADC_IRQHandler>
	...

080001cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f003 0307 	and.w	r3, r3, #7
 80001da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <__NVIC_SetPriorityGrouping+0x44>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e2:	68ba      	ldr	r2, [r7, #8]
 80001e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e8:	4013      	ands	r3, r2
 80001ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f0:	68bb      	ldr	r3, [r7, #8]
 80001f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fe:	4a04      	ldr	r2, [pc, #16]	; (8000210 <__NVIC_SetPriorityGrouping+0x44>)
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	60d3      	str	r3, [r2, #12]
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	2b00      	cmp	r3, #0
 8000224:	db0b      	blt.n	800023e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	f003 021f 	and.w	r2, r3, #31
 800022c:	4906      	ldr	r1, [pc, #24]	; (8000248 <__NVIC_EnableIRQ+0x34>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	095b      	lsrs	r3, r3, #5
 8000234:	2001      	movs	r0, #1
 8000236:	fa00 f202 	lsl.w	r2, r0, r2
 800023a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	e000e100 	.word	0xe000e100

0800024c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025c:	2b00      	cmp	r3, #0
 800025e:	db0a      	blt.n	8000276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	b2da      	uxtb	r2, r3
 8000264:	490c      	ldr	r1, [pc, #48]	; (8000298 <__NVIC_SetPriority+0x4c>)
 8000266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026a:	0112      	lsls	r2, r2, #4
 800026c:	b2d2      	uxtb	r2, r2
 800026e:	440b      	add	r3, r1
 8000270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000274:	e00a      	b.n	800028c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4908      	ldr	r1, [pc, #32]	; (800029c <__NVIC_SetPriority+0x50>)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	f003 030f 	and.w	r3, r3, #15
 8000282:	3b04      	subs	r3, #4
 8000284:	0112      	lsls	r2, r2, #4
 8000286:	b2d2      	uxtb	r2, r2
 8000288:	440b      	add	r3, r1
 800028a:	761a      	strb	r2, [r3, #24]
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000e100 	.word	0xe000e100
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b2:	6013      	str	r3, [r2, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80002c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002ce:	d101      	bne.n	80002d4 <LL_RCC_HSI_IsReady+0x18>
 80002d0:	2301      	movs	r3, #1
 80002d2:	e000      	b.n	80002d6 <LL_RCC_HSI_IsReady+0x1a>
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr

080002de <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002de:	b480      	push	{r7}
 80002e0:	b083      	sub	sp, #12
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80002e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	061b      	lsls	r3, r3, #24
 80002f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002f8:	4313      	orrs	r3, r2
 80002fa:	604b      	str	r3, [r1, #4]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800030e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	f023 0203 	bic.w	r2, r3, #3
 8000318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4313      	orrs	r3, r2
 8000320:	608b      	str	r3, [r1, #8]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	f003 030c 	and.w	r3, r3, #12
}
 800033a:	4618      	mov	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr

08000342 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000342:	b480      	push	{r7}
 8000344:	b083      	sub	sp, #12
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800034a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4313      	orrs	r3, r2
 800035c:	608b      	str	r3, [r1, #8]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000374:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000378:	f023 020f 	bic.w	r2, r3, #15
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	091b      	lsrs	r3, r3, #4
 8000380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000384:	4313      	orrs	r3, r2
 8000386:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800039c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80003a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	608b      	str	r3, [r1, #8]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4313      	orrs	r3, r2
 80003d4:	608b      	str	r3, [r1, #8]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4013      	ands	r3, r2
 8000402:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000404:	68fb      	ldr	r3, [r7, #12]
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000410:	b480      	push	{r7}
 8000412:	b087      	sub	sp, #28
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], SYSCFG_EXTICR1_EXTI0 << ((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT) & 12UL), (Port << ((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT) & 12UL)));
#else
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT), (Port << ((POSITION_VAL((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT))) & 0x0000000FUL)));
 800041a:	4a17      	ldr	r2, [pc, #92]	; (8000478 <LL_SYSCFG_SetEXTISource+0x68>)
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	f003 0303 	and.w	r3, r3, #3
 8000422:	3302      	adds	r3, #2
 8000424:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	0c1b      	lsrs	r3, r3, #16
 800042c:	43db      	mvns	r3, r3
 800042e:	ea02 0103 	and.w	r1, r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	0c1b      	lsrs	r3, r3, #16
 8000436:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	fa93 f3a3 	rbit	r3, r3
 800043e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d101      	bne.n	800044e <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 800044a:	2320      	movs	r3, #32
 800044c:	e003      	b.n	8000456 <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	fab3 f383 	clz	r3, r3
 8000454:	b2db      	uxtb	r3, r3
 8000456:	f003 030f 	and.w	r3, r3, #15
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	409a      	lsls	r2, r3
 800045e:	4806      	ldr	r0, [pc, #24]	; (8000478 <LL_SYSCFG_SetEXTISource+0x68>)
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	f003 0303 	and.w	r3, r3, #3
 8000466:	430a      	orrs	r2, r1
 8000468:	3302      	adds	r3, #2
 800046a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
#endif
}
 800046e:	bf00      	nop
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40010000 	.word	0x40010000

0800047c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <LL_FLASH_SetLatency+0x24>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f023 0207 	bic.w	r2, r3, #7
 800048c:	4904      	ldr	r1, [pc, #16]	; (80004a0 <LL_FLASH_SetLatency+0x24>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	600b      	str	r3, [r1, #0]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	58004000 	.word	0x58004000

080004a4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <LL_FLASH_GetLatency+0x14>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f003 0307 	and.w	r3, r3, #7
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	58004000 	.word	0x58004000

080004bc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80004c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80004ca:	4905      	ldr	r1, [pc, #20]	; (80004e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4313      	orrs	r3, r2
 80004d0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	58000800 	.word	0x58000800

080004e4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80004ee:	685a      	ldr	r2, [r3, #4]
 80004f0:	4904      	ldr	r1, [pc, #16]	; (8000504 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	604b      	str	r3, [r1, #4]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	58000800 	.word	0x58000800

08000508 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <LL_LPM_EnableDeepSleep+0x18>)
 800050e:	691b      	ldr	r3, [r3, #16]
 8000510:	4a03      	ldr	r2, [pc, #12]	; (8000520 <LL_LPM_EnableDeepSleep+0x18>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6113      	str	r3, [r2, #16]
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000534:	4904      	ldr	r1, [pc, #16]	; (8000548 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	600b      	str	r3, [r1, #0]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	58000400 	.word	0x58000400

0800054c <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <LL_PWR_SetPowerMode+0x24>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f023 0207 	bic.w	r2, r3, #7
 800055c:	4904      	ldr	r1, [pc, #16]	; (8000570 <LL_PWR_SetPowerMode+0x24>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	600b      	str	r3, [r1, #0]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	58000400 	.word	0x58000400

08000574 <LL_PWR_EnablePUPDCfg>:
  * @brief  Enable pull-up and pull-down configuration
  * @rmtoll CR3          APC           LL_PWR_EnablePUPDCfg
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnablePUPDCfg(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_PWR_EnablePUPDCfg+0x18>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	4a03      	ldr	r2, [pc, #12]	; (800058c <LL_PWR_EnablePUPDCfg+0x18>)
 800057e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000582:	6093      	str	r3, [r2, #8]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	58000400 	.word	0x58000400

08000590 <LL_PWR_EnableWakeUpPin>:
  *         @arg @ref LL_PWR_WAKEUP_PIN2
  *         @arg @ref LL_PWR_WAKEUP_PIN3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  SET_BIT(PWR->CR3, WakeUpPin);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_PWR_EnableWakeUpPin+0x20>)
 800059a:	689a      	ldr	r2, [r3, #8]
 800059c:	4904      	ldr	r1, [pc, #16]	; (80005b0 <LL_PWR_EnableWakeUpPin+0x20>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	608b      	str	r3, [r1, #8]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	58000400 	.word	0x58000400

080005b4 <LL_PWR_DisableWakeUpPin>:
  *         @arg @ref LL_PWR_WAKEUP_PIN2
  *         @arg @ref LL_PWR_WAKEUP_PIN3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->CR3, WakeUpPin);
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <LL_PWR_DisableWakeUpPin+0x20>)
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	43db      	mvns	r3, r3
 80005c4:	4903      	ldr	r1, [pc, #12]	; (80005d4 <LL_PWR_DisableWakeUpPin+0x20>)
 80005c6:	4013      	ands	r3, r2
 80005c8:	608b      	str	r3, [r1, #8]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	58000400 	.word	0x58000400

080005d8 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6819      	ldr	r1, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	601a      	str	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <LL_PWR_IsActiveFlag_WU1>:
  * @brief  Get Wake-up Flag 1
  * @rmtoll SR1          WUF1          LL_PWR_IsActiveFlag_WU1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU1(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR1, PWR_SR1_WUF1) == (PWR_SR1_WUF1)) ? 1UL : 0UL);
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <LL_PWR_IsActiveFlag_WU1+0x20>)
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	2b01      	cmp	r3, #1
 8000606:	d101      	bne.n	800060c <LL_PWR_IsActiveFlag_WU1+0x14>
 8000608:	2301      	movs	r3, #1
 800060a:	e000      	b.n	800060e <LL_PWR_IsActiveFlag_WU1+0x16>
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	58000400 	.word	0x58000400

0800061c <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <LL_PWR_ClearFlag_WU+0x14>)
 8000622:	2207      	movs	r2, #7
 8000624:	619a      	str	r2, [r3, #24]
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	58000400 	.word	0x58000400

08000634 <LL_PWR_ClearFlag_WU1>:
  * @brief  Clear Wake-up Flag 1
  * @rmtoll SCR          CWUF1         LL_PWR_ClearFlag_WU1
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU1(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF1);
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <LL_PWR_ClearFlag_WU1+0x14>)
 800063a:	2201      	movs	r2, #1
 800063c:	619a      	str	r2, [r3, #24]
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	58000400 	.word	0x58000400

0800064c <LL_PWR_IsActiveFlag_C1SB>:
  * @brief  Get system Standby flag for CPU1
  * @rmtoll EXTSCR       C1SBF         LL_PWR_IsActiveFlag_C1SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1SB(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1SBF) == (PWR_EXTSCR_C1SBF)) ? 1UL : 0UL);
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <LL_PWR_IsActiveFlag_C1SB+0x24>)
 8000652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800065a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800065e:	d101      	bne.n	8000664 <LL_PWR_IsActiveFlag_C1SB+0x18>
 8000660:	2301      	movs	r3, #1
 8000662:	e000      	b.n	8000666 <LL_PWR_IsActiveFlag_C1SB+0x1a>
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	58000400 	.word	0x58000400

08000674 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800067a:	2201      	movs	r2, #1
 800067c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	58000400 	.word	0x58000400

0800068c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800068c:	b480      	push	{r7}
 800068e:	b08b      	sub	sp, #44	; 0x2c
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
#else
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	fa93 f3a3 	rbit	r3, r3
 80006a6:	613b      	str	r3, [r7, #16]
  return result;
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d101      	bne.n	80006b6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80006b2:	2320      	movs	r3, #32
 80006b4:	e003      	b.n	80006be <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	fab3 f383 	clz	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	2103      	movs	r1, #3
 80006c2:	fa01 f303 	lsl.w	r3, r1, r3
 80006c6:	43db      	mvns	r3, r3
 80006c8:	401a      	ands	r2, r3
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	fa93 f3a3 	rbit	r3, r3
 80006d4:	61fb      	str	r3, [r7, #28]
  return result;
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80006e0:	2320      	movs	r3, #32
 80006e2:	e003      	b.n	80006ec <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	fab3 f383 	clz	r3, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	fa01 f303 	lsl.w	r3, r1, r3
 80006f4:	431a      	orrs	r2, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	601a      	str	r2, [r3, #0]
#endif /* CORE_CM0PLUS */
}
 80006fa:	bf00      	nop
 80006fc:	372c      	adds	r7, #44	; 0x2c
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000704:	b480      	push	{r7}
 8000706:	b08b      	sub	sp, #44	; 0x2c
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
#else
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa93 f3a3 	rbit	r3, r3
 800071e:	613b      	str	r3, [r7, #16]
  return result;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d101      	bne.n	800072e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800072a:	2320      	movs	r3, #32
 800072c:	e003      	b.n	8000736 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	fab3 f383 	clz	r3, r3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	2103      	movs	r1, #3
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43db      	mvns	r3, r3
 8000740:	401a      	ands	r2, r3
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	fa93 f3a3 	rbit	r3, r3
 800074c:	61fb      	str	r3, [r7, #28]
  return result;
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000758:	2320      	movs	r3, #32
 800075a:	e003      	b.n	8000764 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075e:	fab3 f383 	clz	r3, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	431a      	orrs	r2, r3
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	60da      	str	r2, [r3, #12]
#endif /* CORE_CM0PLUS */
}
 8000772:	bf00      	nop
 8000774:	372c      	adds	r7, #44	; 0x2c
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	691a      	ldr	r2, [r3, #16]
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	4013      	ands	r3, r2
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d101      	bne.n	8000798 <LL_GPIO_IsInputPinSet+0x1c>
 8000794:	2301      	movs	r3, #1
 8000796:	e000      	b.n	800079a <LL_GPIO_IsInputPinSet+0x1e>
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007be:	b480      	push	{r7}
 80007c0:	b085      	sub	sp, #20
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	4013      	ands	r3, r2
 80007d4:	041a      	lsls	r2, r3, #16
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	43d9      	mvns	r1, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	400b      	ands	r3, r1
 80007de:	431a      	orrs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	619a      	str	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr

080007ee <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80007fc:	601a      	str	r2, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f245 5255 	movw	r2, #21845	; 0x5555
 8000830:	601a      	str	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	f003 0207 	and.w	r2, r3, #7
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	605a      	str	r2, [r3, #4]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	609a      	str	r2, [r3, #8]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <LL_IWDG_IsReady>:
  *         SR           WVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <LL_IWDG_IsReady+0x18>
 800088c:	2301      	movs	r3, #1
 800088e:	e000      	b.n	8000892 <LL_IWDG_IsReady+0x1a>
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <MX_IWDG_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MX_IWDG_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_IWDG_Init+0x3c>)
 80008a2:	f7ff ffa4 	bl	80007ee <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 80008a6:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_IWDG_Init+0x3c>)
 80008a8:	f7ff ffbb 	bl	8000822 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_256);
 80008ac:	2106      	movs	r1, #6
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_IWDG_Init+0x3c>)
 80008b0:	f7ff ffc4 	bl	800083c <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 4078);
 80008b4:	f640 71ee 	movw	r1, #4078	; 0xfee
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <MX_IWDG_Init+0x3c>)
 80008ba:	f7ff ffce 	bl	800085a <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 80008be:	bf00      	nop
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_IWDG_Init+0x3c>)
 80008c2:	f7ff ffd9 	bl	8000878 <LL_IWDG_IsReady>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d1f9      	bne.n	80008c0 <MX_IWDG_Init+0x24>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <MX_IWDG_Init+0x3c>)
 80008ce:	f7ff ff9b 	bl	8000808 <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40003000 	.word	0x40003000

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	MX_IWDG_Init();
 80008e0:	f7ff ffdc 	bl	800089c <MX_IWDG_Init>
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f7ff fc71 	bl	80001cc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f80f 	bl	800090c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize User push-button (B1) in GPIO mode */
  UserButton_Init(BUTTON_MODE_GPIO);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 f880 	bl	80009f4 <UserButton_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 f844 	bl	8000980 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize User push-button (B1) in EXTI mode */
  UserButton_Init(BUTTON_MODE_EXTI);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 f87b 	bl	80009f4 <UserButton_Init>
  
  /* Configure Power IP */
  Configure_PWR();
 80008fe:	f000 f8af 	bl	8000a60 <Configure_PWR>
  /* Led blinking in Run mode */
  LED_Blinking(LED_BLINK_FAST);
 8000902:	20c8      	movs	r0, #200	; 0xc8
 8000904:	f000 f866 	bl	80009d4 <LED_Blinking>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000908:	e7fe      	b.n	8000908 <main+0x2c>
	...

0800090c <SystemClock_Config>:




void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fdb3 	bl	800047c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000916:	bf00      	nop
 8000918:	f7ff fdc4 	bl	80004a4 <LL_FLASH_GetLatency>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1fa      	bne.n	8000918 <SystemClock_Config+0xc>
  {
  }

  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000922:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000926:	f7ff fdfd 	bl	8000524 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800092a:	f7ff fcb9 	bl	80002a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800092e:	bf00      	nop
 8000930:	f7ff fcc4 	bl	80002bc <LL_RCC_HSI_IsReady>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d1fa      	bne.n	8000930 <SystemClock_Config+0x24>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 800093a:	2040      	movs	r0, #64	; 0x40
 800093c:	f7ff fccf 	bl	80002de <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fce0 	bl	8000306 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000946:	bf00      	nop
 8000948:	f7ff fcf0 	bl	800032c <LL_RCC_GetSysClkSource>
 800094c:	4603      	mov	r3, r0
 800094e:	2b04      	cmp	r3, #4
 8000950:	d1fa      	bne.n	8000948 <SystemClock_Config+0x3c>
  {
  }

  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fcf5 	bl	8000342 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAHB3Prescaler(LL_RCC_SYSCLK_DIV_1);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fd05 	bl	8000368 <LL_RCC_SetAHB3Prescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff fd18 	bl	8000394 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fd28 	bl	80003ba <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(16000000);
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <SystemClock_Config+0x70>)
 800096c:	f000 fb04 	bl	8000f78 <LL_Init1msTick>

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(16000000);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <SystemClock_Config+0x70>)
 8000972:	f000 fb35 	bl	8000fe0 <LL_SetSystemCoreClock>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	00f42400 	.word	0x00f42400

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
 8000994:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000996:	2002      	movs	r0, #2
 8000998:	f7ff fd22 	bl	80003e0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 800099c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <MX_GPIO_Init+0x50>)
 80009a2:	f7ff feff 	bl	80007a4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 80009a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009ac:	2301      	movs	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <MX_GPIO_Init+0x50>)
 80009c2:	f000 fa49 	bl	8000e58 <LL_GPIO_Init>

}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	48000400 	.word	0x48000400

080009d4 <LED_Blinking>:
  *     @arg LED_BLINK_SLOW : Slow Blinking
  *     @arg LED_BLINK_ERROR : Error specific Blinking
  * @retval None
  */
void LED_Blinking(uint32_t Period)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Toggle IO in an infinite loop */
  while (1)
  {
    LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80009dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <LED_Blinking+0x1c>)
 80009e2:	f7ff feec 	bl	80007be <LL_GPIO_TogglePin>
    LL_mDelay(Period);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 fad4 	bl	8000f94 <LL_mDelay>
    LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80009ec:	e7f6      	b.n	80009dc <LED_Blinking+0x8>
 80009ee:	bf00      	nop
 80009f0:	48000400 	.word	0x48000400

080009f4 <UserButton_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void UserButton_Init(uint32_t Button_Mode)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff fcef 	bl	80003e0 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure GPIO for BUTTON */
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_MODE_INPUT);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2101      	movs	r1, #1
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f7ff fe3f 	bl	800068c <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_PULL_UP);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2101      	movs	r1, #1
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f7ff fe75 	bl	8000704 <LL_GPIO_SetPinPull>

  if(Button_Mode == BUTTON_MODE_EXTI)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d111      	bne.n	8000a44 <UserButton_Init+0x50>
  {
    /* Connect External Line to the GPIO */
    USER_BUTTON_SYSCFG_SET_EXTI();
 8000a20:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fcf3 	bl	8000410 <LL_SYSCFG_SetEXTISource>
    
    /* Enable a falling trigger EXTI line 13 Interrupt */
    USER_BUTTON_EXTI_LINE_ENABLE();
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff fd46 	bl	80004bc <LL_EXTI_EnableIT_0_31>
    USER_BUTTON_EXTI_FALLING_TRIG_ENABLE();
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fd57 	bl	80004e4 <LL_EXTI_EnableFallingTrig_0_31>
    
    /* Configure NVIC for USER_BUTTON_EXTI_IRQn */
    NVIC_EnableIRQ(USER_BUTTON_EXTI_IRQn); 
 8000a36:	2006      	movs	r0, #6
 8000a38:	f7ff fbec 	bl	8000214 <__NVIC_EnableIRQ>
    NVIC_SetPriority(USER_BUTTON_EXTI_IRQn,0x03);  
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	2006      	movs	r0, #6
 8000a40:	f7ff fc04 	bl	800024c <__NVIC_SetPriority>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <UserButton_GetState>:
  * @brief  Returns the selected Button state.
  * @param  None
  * @retval The Button GPIO pin value.
  */
uint32_t UserButton_GetState(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  return LL_GPIO_IsInputPinSet(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN);
 8000a50:	2101      	movs	r1, #1
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f7ff fe91 	bl	800077c <LL_GPIO_IsInputPinSet>
 8000a5a:	4603      	mov	r3, r0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <Configure_PWR>:
  * @brief  Function to configure and initialize PWR IP.
  * @param  None
  * @retval None
  */
void Configure_PWR(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Check if the system was resumed from Standby mode */
  if(LL_PWR_IsActiveFlag_C1SB() != 0)
 8000a64:	f7ff fdf2 	bl	800064c <LL_PWR_IsActiveFlag_C1SB>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00b      	beq.n	8000a86 <Configure_PWR+0x26>
  {
    /* Clear Standby flag */
    LL_PWR_ClearFlag_C1STOP_C1STB();
 8000a6e:	f7ff fe01 	bl	8000674 <LL_PWR_ClearFlag_C1STOP_C1STB>
    
    /* Change LED speed to SLOW to indicate exit from Standby mode */
    LED_Blinking(LED_BLINK_SLOW);
 8000a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a76:	f7ff ffad 	bl	80009d4 <LED_Blinking>
    
    /* Wait that user release the User push-button (B1) */
    while(UserButton_GetState() == 0){}
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffe6 	bl	8000a4c <UserButton_GetState>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0fa      	beq.n	8000a7c <Configure_PWR+0x1c>
  }
  
  /* Check and Clear the Wakeup flag */
  if (LL_PWR_IsActiveFlag_WU1() != 0)
 8000a86:	f7ff fdb7 	bl	80005f8 <LL_PWR_IsActiveFlag_WU1>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <Configure_PWR+0x34>
  {
    LL_PWR_ClearFlag_WU1();
 8000a90:	f7ff fdd0 	bl	8000634 <LL_PWR_ClearFlag_WU1>
  }
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <EnterStandbyMode>:
  * @brief  Function to configure and enter in Standby Mode.
  * @param  None
  * @retval None
  */
void EnterStandbyMode(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Wait that user release the User push-button (B1) */
  while(UserButton_GetState() == 0){}
 8000a9c:	bf00      	nop
 8000a9e:	f7ff ffd5 	bl	8000a4c <UserButton_GetState>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0fa      	beq.n	8000a9e <EnterStandbyMode+0x6>
  
  /* Turn-off LED */
  /* Note: LED state at this step depends on blinking state at the instant of user button is pressed. */
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_9);
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <EnterStandbyMode+0x4c>)
 8000aae:	f7ff fe79 	bl	80007a4 <LL_GPIO_ResetOutputPin>
  
  /* Disable all used wakeup sources */
  LL_PWR_DisableWakeUpPin(LL_PWR_WAKEUP_PIN1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fd7e 	bl	80005b4 <LL_PWR_DisableWakeUpPin>
  
  /* Clear all wake up Flag */
  LL_PWR_ClearFlag_WU();
 8000ab8:	f7ff fdb0 	bl	800061c <LL_PWR_ClearFlag_WU>
  
  /* Enable pull up on wakeup pin */
  /* Note: Setting not mandatory but recommended since there is no external pulling resistor on pin PA0 on STM32WL Nucleo board */
  LL_PWR_EnableGPIOPullUp(LL_PWR_GPIO_A, LL_PWR_GPIO_BIT_0);
 8000abc:	2101      	movs	r1, #1
 8000abe:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <EnterStandbyMode+0x50>)
 8000ac0:	f7ff fd8a 	bl	80005d8 <LL_PWR_EnableGPIOPullUp>
  
  /* Enable pull-up and pull-down configuration for CPU1 */
  LL_PWR_EnablePUPDCfg();
 8000ac4:	f7ff fd56 	bl	8000574 <LL_PWR_EnablePUPDCfg>
  
  /* Enable wakeup pin */
  LL_PWR_EnableWakeUpPin(LL_PWR_WAKEUP_PIN1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff fd61 	bl	8000590 <LL_PWR_EnableWakeUpPin>
  
  /* As default User push-button (B1) state is high level, need to clear all wake up Flag again */
  LL_PWR_ClearFlag_WU();
 8000ace:	f7ff fda5 	bl	800061c <LL_PWR_ClearFlag_WU>
  /** Request to enter Standby mode
    * Following procedure describe in STM32WLxx Reference Manual
    * See PWR part, section Low-power modes, Standby mode
    */
  /* Set Standby mode when CPU enters deepsleep */
  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f7ff fd3a 	bl	800054c <LL_PWR_SetPowerMode>
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  LL_LPM_EnableDeepSleep();
 8000ad8:	f7ff fd16 	bl	8000508 <LL_LPM_EnableDeepSleep>
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8000adc:	bf30      	wfi
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	48000400 	.word	0x48000400
 8000ae8:	58000420 	.word	0x58000420

08000aec <UserButton_Callback>:
  * @brief  Function to manage BUTTON IRQ Handler
  * @param  None
  * @retval None
  */
void UserButton_Callback(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Turn LED off */
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <UserButton_Callback+0x18>)
 8000af6:	f7ff fe55 	bl	80007a4 <LL_GPIO_ResetOutputPin>
  
  /* Configure and enter in Standby Mode */
  EnterStandbyMode();
 8000afa:	f7ff ffcd 	bl	8000a98 <EnterStandbyMode>
  
  /* Here Device is in Standby mode */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	48000400 	.word	0x48000400

08000b08 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4013      	ands	r3, r2
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d101      	bne.n	8000b22 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	58000800 	.word	0x58000800

08000b34 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <LL_EXTI_ClearFlag_0_31+0x18>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60d3      	str	r3, [r2, #12]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	58000800 	.word	0x58000800

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <HardFault_Handler+0x4>

08000b62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <BusFault_Handler+0x4>

08000b6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <EXTI0_IRQHandler>:
  * @brief  This function handles external line 0 interrupt request.
  * @param  None
  * @retval None
  */
void USER_BUTTON_IRQHANDLER(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Manage Flags */
  if(LL_EXTI_IsActiveFlag_0_31(USER_BUTTON_EXTI_LINE) != RESET)
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff ffad 	bl	8000b08 <LL_EXTI_IsActiveFlag_0_31>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d004      	beq.n	8000bbe <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(USER_BUTTON_EXTI_LINE);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff ffbd 	bl	8000b34 <LL_EXTI_ClearFlag_0_31>

    /* Manage code in main.c.*/
    UserButton_Callback();
 8000bba:	f7ff ff97 	bl	8000aec <UserButton_Callback>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <LL_GPIO_SetPinMode>:
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b08b      	sub	sp, #44	; 0x2c
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	fa93 f3a3 	rbit	r3, r3
 8000be8:	613b      	str	r3, [r7, #16]
  return result;
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	e003      	b.n	8000c00 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fab3 f383 	clz	r3, r3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2103      	movs	r1, #3
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	fa93 f3a3 	rbit	r3, r3
 8000c16:	61fb      	str	r3, [r7, #28]
  return result;
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000c22:	2320      	movs	r3, #32
 8000c24:	e003      	b.n	8000c2e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	fab3 f383 	clz	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	431a      	orrs	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	601a      	str	r2, [r3, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	372c      	adds	r7, #44	; 0x2c
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <LL_GPIO_SetPinOutputType>:
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	fb01 f303 	mul.w	r3, r1, r3
 8000c64:	431a      	orrs	r2, r3
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	605a      	str	r2, [r3, #4]
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <LL_GPIO_SetPinSpeed>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	b08b      	sub	sp, #44	; 0x2c
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa93 f3a3 	rbit	r3, r3
 8000c8e:	613b      	str	r3, [r7, #16]
  return result;
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	e003      	b.n	8000ca6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	fab3 f383 	clz	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2103      	movs	r1, #3
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	fa93 f3a3 	rbit	r3, r3
 8000cbc:	61fb      	str	r3, [r7, #28]
  return result;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000cc8:	2320      	movs	r3, #32
 8000cca:	e003      	b.n	8000cd4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	fab3 f383 	clz	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	609a      	str	r2, [r3, #8]
}
 8000ce2:	bf00      	nop
 8000ce4:	372c      	adds	r7, #44	; 0x2c
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <LL_GPIO_SetPinPull>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	b08b      	sub	sp, #44	; 0x2c
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	613b      	str	r3, [r7, #16]
  return result;
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000d12:	2320      	movs	r3, #32
 8000d14:	e003      	b.n	8000d1e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2103      	movs	r1, #3
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	401a      	ands	r2, r3
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	fa93 f3a3 	rbit	r3, r3
 8000d34:	61fb      	str	r3, [r7, #28]
  return result;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000d40:	2320      	movs	r3, #32
 8000d42:	e003      	b.n	8000d4c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	fab3 f383 	clz	r3, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	431a      	orrs	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	60da      	str	r2, [r3, #12]
}
 8000d5a:	bf00      	nop
 8000d5c:	372c      	adds	r7, #44	; 0x2c
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <LL_GPIO_SetAFPin_0_7>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b08b      	sub	sp, #44	; 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6a1a      	ldr	r2, [r3, #32]
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	613b      	str	r3, [r7, #16]
  return result;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	e003      	b.n	8000d96 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	fab3 f383 	clz	r3, r3
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	210f      	movs	r1, #15
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	401a      	ands	r2, r3
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	fa93 f3a3 	rbit	r3, r3
 8000dac:	61fb      	str	r3, [r7, #28]
  return result;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000db8:	2320      	movs	r3, #32
 8000dba:	e003      	b.n	8000dc4 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	fab3 f383 	clz	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	621a      	str	r2, [r3, #32]
}
 8000dd2:	bf00      	nop
 8000dd4:	372c      	adds	r7, #44	; 0x2c
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <LL_GPIO_SetAFPin_8_15>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b08b      	sub	sp, #44	; 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	0a1b      	lsrs	r3, r3, #8
 8000df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa93 f3a3 	rbit	r3, r3
 8000df8:	613b      	str	r3, [r7, #16]
  return result;
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000e04:	2320      	movs	r3, #32
 8000e06:	e003      	b.n	8000e10 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	210f      	movs	r1, #15
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e22:	6a3b      	ldr	r3, [r7, #32]
 8000e24:	fa93 f3a3 	rbit	r3, r3
 8000e28:	61fb      	str	r3, [r7, #28]
  return result;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d101      	bne.n	8000e38 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000e34:	2320      	movs	r3, #32
 8000e36:	e003      	b.n	8000e40 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	fab3 f383 	clz	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e4e:	bf00      	nop
 8000e50:	372c      	adds	r7, #44	; 0x2c
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
#if defined(CORE_CM0PLUS)
  pinpos = 0;
#else
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	fa93 f3a3 	rbit	r3, r3
 8000e6e:	60fb      	str	r3, [r7, #12]
  return result;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <LL_GPIO_Init+0x26>
    return 32U;
 8000e7a:	2320      	movs	r3, #32
 8000e7c:	e003      	b.n	8000e86 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fab3 f383 	clz	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	61fb      	str	r3, [r7, #28]
#endif /* CORE_CM0PLUS */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000e88:	e04e      	b.n	8000f28 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d040      	beq.n	8000f22 <LL_GPIO_Init+0xca>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	69b9      	ldr	r1, [r7, #24]
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fe90 	bl	8000bce <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d003      	beq.n	8000ebe <LL_GPIO_Init+0x66>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d10d      	bne.n	8000eda <LL_GPIO_Init+0x82>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	69b9      	ldr	r1, [r7, #24]
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fed4 	bl	8000c74 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	69b9      	ldr	r1, [r7, #24]
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff feb6 	bl	8000c46 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	69b9      	ldr	r1, [r7, #24]
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff02 	bl	8000cec <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d111      	bne.n	8000f14 <LL_GPIO_Init+0xbc>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2bff      	cmp	r3, #255	; 0xff
 8000ef4:	d807      	bhi.n	8000f06 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	461a      	mov	r2, r3
 8000efc:	69b9      	ldr	r1, [r7, #24]
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff30 	bl	8000d64 <LL_GPIO_SetAFPin_0_7>
 8000f04:	e006      	b.n	8000f14 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	69b9      	ldr	r1, [r7, #24]
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff64 	bl	8000ddc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	69b9      	ldr	r1, [r7, #24]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fe56 	bl	8000bce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3301      	adds	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1a9      	bne.n	8000e8a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <LL_InitTick>:
  * @param  Ticks Number of ticks
  * @retval None
  */
#endif /* CORE_CM0PLUS */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  if (Ticks > 0U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00c      	beq.n	8000f6a <LL_InitTick+0x2a>
  {
    /* Configure the SysTick to have interrupt in 1ms time base */
    SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <LL_InitTick+0x34>)
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
    SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <LL_InitTick+0x34>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <LL_InitTick+0x34>)
 8000f66:	2205      	movs	r2, #5
 8000f68:	601a      	str	r2, [r3, #0]
                     SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <LL_Init1msTick>:
    *         (HCLK1_Frequency field)
    * @retval None
    */
#endif /* CORE_CM0PLUS */
  void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000);
 8000f80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ffdb 	bl	8000f40 <LL_InitTick>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <LL_mDelay+0x48>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay;
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fae:	d00c      	beq.n	8000fca <LL_mDelay+0x36>
  {
    tmpDelay ++;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8000fb6:	e008      	b.n	8000fca <LL_mDelay+0x36>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <LL_mDelay+0x48>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <LL_mDelay+0x36>
    {
      tmpDelay --;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f3      	bne.n	8000fb8 <LL_mDelay+0x24>
    }
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <LL_SetSystemCoreClock>:
            @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field))
  * @retval None
  */
#endif /* CORE_CM0PLUS */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000fe8:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <LL_SetSystemCoreClock+0x18>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	20000000 	.word	0x20000000

08000ffc <__libc_init_array>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	4d0d      	ldr	r5, [pc, #52]	; (8001034 <__libc_init_array+0x38>)
 8001000:	4c0d      	ldr	r4, [pc, #52]	; (8001038 <__libc_init_array+0x3c>)
 8001002:	1b64      	subs	r4, r4, r5
 8001004:	10a4      	asrs	r4, r4, #2
 8001006:	2600      	movs	r6, #0
 8001008:	42a6      	cmp	r6, r4
 800100a:	d109      	bne.n	8001020 <__libc_init_array+0x24>
 800100c:	4d0b      	ldr	r5, [pc, #44]	; (800103c <__libc_init_array+0x40>)
 800100e:	4c0c      	ldr	r4, [pc, #48]	; (8001040 <__libc_init_array+0x44>)
 8001010:	f000 f818 	bl	8001044 <_init>
 8001014:	1b64      	subs	r4, r4, r5
 8001016:	10a4      	asrs	r4, r4, #2
 8001018:	2600      	movs	r6, #0
 800101a:	42a6      	cmp	r6, r4
 800101c:	d105      	bne.n	800102a <__libc_init_array+0x2e>
 800101e:	bd70      	pop	{r4, r5, r6, pc}
 8001020:	f855 3b04 	ldr.w	r3, [r5], #4
 8001024:	4798      	blx	r3
 8001026:	3601      	adds	r6, #1
 8001028:	e7ee      	b.n	8001008 <__libc_init_array+0xc>
 800102a:	f855 3b04 	ldr.w	r3, [r5], #4
 800102e:	4798      	blx	r3
 8001030:	3601      	adds	r6, #1
 8001032:	e7f2      	b.n	800101a <__libc_init_array+0x1e>
 8001034:	08001060 	.word	0x08001060
 8001038:	08001060 	.word	0x08001060
 800103c:	08001060 	.word	0x08001060
 8001040:	08001064 	.word	0x08001064

08001044 <_init>:
 8001044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001046:	bf00      	nop
 8001048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800104a:	bc08      	pop	{r3}
 800104c:	469e      	mov	lr, r3
 800104e:	4770      	bx	lr

08001050 <_fini>:
 8001050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001052:	bf00      	nop
 8001054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001056:	bc08      	pop	{r3}
 8001058:	469e      	mov	lr, r3
 800105a:	4770      	bx	lr
 800105c:	0000      	movs	r0, r0
	...
