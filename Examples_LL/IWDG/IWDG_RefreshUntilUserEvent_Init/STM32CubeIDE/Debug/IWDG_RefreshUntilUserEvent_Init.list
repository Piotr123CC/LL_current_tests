
IWDG_RefreshUntilUserEvent_Init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012d8  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001410  08001410  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001410  08001410  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001410  08001410  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001410  08001410  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001418  08001418  00011418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  08001428  00020008  2**2
                  ALLOC
 10 RAM1_region   00000000  20000028  20000028  00020008  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020008  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000028  20000028  00020028  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 14 .debug_line   000035c9  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000417a  00000000  00000000  000235fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000c4e  00000000  00000000  00027775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000004a0  00000000  00000000  000283c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000718a1  00000000  00000000  00028868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000438  00000000  00000000  0009a110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001387f  00000000  00000000  0009a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  000addc7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001238  00000000  00000000  000ade18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000008 	.word	0x20000008
 8000154:	00000000 	.word	0x00000000
 8000158:	080013f4 	.word	0x080013f4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000000c 	.word	0x2000000c
 8000174:	080013f4 	.word	0x080013f4

08000178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800017c:	f000 fcd5 	bl	8000b2a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480c      	ldr	r0, [pc, #48]	; (80001b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490d      	ldr	r1, [pc, #52]	; (80001b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0a      	ldr	r4, [pc, #40]	; (80001c4 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001a6:	f001 f901 	bl	80013ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001aa:	f000 fb3f 	bl	800082c <main>

080001ae <LoopForever>:

LoopForever:
    b LoopForever
 80001ae:	e7fe      	b.n	80001ae <LoopForever>
  ldr   r0, =_estack
 80001b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80001b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80001bc:	08001420 	.word	0x08001420
  ldr r2, =_sbss
 80001c0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80001c4:	20000028 	.word	0x20000028

080001c8 <ADC_IRQHandler>:
  * @retval : None
  */
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c8:	e7fe      	b.n	80001c8 <ADC_IRQHandler>
	...

080001cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f003 0307 	and.w	r3, r3, #7
 80001da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <__NVIC_SetPriorityGrouping+0x44>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e2:	68ba      	ldr	r2, [r7, #8]
 80001e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e8:	4013      	ands	r3, r2
 80001ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f0:	68bb      	ldr	r3, [r7, #8]
 80001f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fe:	4a04      	ldr	r2, [pc, #16]	; (8000210 <__NVIC_SetPriorityGrouping+0x44>)
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	60d3      	str	r3, [r2, #12]
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <__NVIC_GetPriorityGrouping+0x18>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	0a1b      	lsrs	r3, r3, #8
 800021e:	f003 0307 	and.w	r3, r3, #7
}
 8000222:	4618      	mov	r0, r3
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	2b00      	cmp	r3, #0
 8000240:	db0b      	blt.n	800025a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f003 021f 	and.w	r2, r3, #31
 8000248:	4906      	ldr	r1, [pc, #24]	; (8000264 <__NVIC_EnableIRQ+0x34>)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	095b      	lsrs	r3, r3, #5
 8000250:	2001      	movs	r0, #1
 8000252:	fa00 f202 	lsl.w	r2, r0, r2
 8000256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	e000e100 	.word	0xe000e100

08000268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000278:	2b00      	cmp	r3, #0
 800027a:	db0a      	blt.n	8000292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	b2da      	uxtb	r2, r3
 8000280:	490c      	ldr	r1, [pc, #48]	; (80002b4 <__NVIC_SetPriority+0x4c>)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	0112      	lsls	r2, r2, #4
 8000288:	b2d2      	uxtb	r2, r2
 800028a:	440b      	add	r3, r1
 800028c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000290:	e00a      	b.n	80002a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4908      	ldr	r1, [pc, #32]	; (80002b8 <__NVIC_SetPriority+0x50>)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	f003 030f 	and.w	r3, r3, #15
 800029e:	3b04      	subs	r3, #4
 80002a0:	0112      	lsls	r2, r2, #4
 80002a2:	b2d2      	uxtb	r2, r2
 80002a4:	440b      	add	r3, r1
 80002a6:	761a      	strb	r2, [r3, #24]
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000e100 	.word	0xe000e100
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	; 0x24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f003 0307 	and.w	r3, r3, #7
 80002ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	f1c3 0307 	rsb	r3, r3, #7
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	bf28      	it	cs
 80002da:	2304      	movcs	r3, #4
 80002dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	3304      	adds	r3, #4
 80002e2:	2b06      	cmp	r3, #6
 80002e4:	d902      	bls.n	80002ec <NVIC_EncodePriority+0x30>
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	3b03      	subs	r3, #3
 80002ea:	e000      	b.n	80002ee <NVIC_EncodePriority+0x32>
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f0:	f04f 32ff 	mov.w	r2, #4294967295
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	43da      	mvns	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	401a      	ands	r2, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000304:	f04f 31ff 	mov.w	r1, #4294967295
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43d9      	mvns	r1, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	4313      	orrs	r3, r2
         );
}
 8000316:	4618      	mov	r0, r3
 8000318:	3724      	adds	r7, #36	; 0x24
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr

0800033a <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 800033a:	b480      	push	{r7}
 800033c:	b083      	sub	sp, #12
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000348:	601a      	str	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000362:	601a      	str	r2, [r3, #0]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	f003 0207 	and.w	r2, r3, #7
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	605a      	str	r2, [r3, #4]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	609a      	str	r2, [r3, #8]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <LL_IWDG_IsReady>:
  *         SR           WVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 80003aa:	b480      	push	{r7}
 80003ac:	b083      	sub	sp, #12
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	f003 0307 	and.w	r3, r3, #7
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d101      	bne.n	80003c2 <LL_IWDG_IsReady+0x18>
 80003be:	2301      	movs	r3, #1
 80003c0:	e000      	b.n	80003c4 <LL_IWDG_IsReady+0x1a>
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80003d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80003f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003fa:	f003 0302 	and.w	r3, r3, #2
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d101      	bne.n	8000406 <LL_RCC_LSI_IsReady+0x18>
 8000402:	2301      	movs	r3, #1
 8000404:	e000      	b.n	8000408 <LL_RCC_LSI_IsReady+0x1a>
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	6013      	str	r3, [r2, #0]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	2b02      	cmp	r3, #2
 800043c:	d101      	bne.n	8000442 <LL_RCC_MSI_IsReady+0x16>
 800043e:	2301      	movs	r3, #1
 8000440:	e000      	b.n	8000444 <LL_RCC_MSI_IsReady+0x18>
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6013      	str	r3, [r2, #0]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800047a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	600b      	str	r3, [r1, #0]
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	021b      	lsls	r3, r3, #8
 80004a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a8:	4313      	orrs	r3, r2
 80004aa:	604b      	str	r3, [r1, #4]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	f023 0203 	bic.w	r2, r3, #3
 80004c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4313      	orrs	r3, r2
 80004d0:	608b      	str	r3, [r1, #8]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	f003 030c 	and.w	r3, r3, #12
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b083      	sub	sp, #12
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4313      	orrs	r3, r2
 800050c:	608b      	str	r3, [r1, #8]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000524:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000528:	f023 020f 	bic.w	r2, r3, #15
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	091b      	lsrs	r3, r3, #4
 8000530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000534:	4313      	orrs	r3, r2
 8000536:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	608b      	str	r3, [r1, #8]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800057c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	608b      	str	r3, [r1, #8]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <LL_RCC_IsActiveFlag_IWDGRST>:
  * @brief  Check if RCC flag Independent Watchdog reset is set or not.
  * @rmtoll CSR          IWDGRSTF      LL_RCC_IsActiveFlag_IWDGRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_IWDGRST(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_IWDGRSTF) == (RCC_CSR_IWDGRSTF)) ? 1UL : 0UL);
 8000594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800059c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005a4:	d101      	bne.n	80005aa <LL_RCC_IsActiveFlag_IWDGRST+0x1a>
 80005a6:	2301      	movs	r3, #1
 80005a8:	e000      	b.n	80005ac <LL_RCC_IsActiveFlag_IWDGRST+0x1c>
 80005aa:	2300      	movs	r3, #0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80005b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4013      	ands	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f8:	68fb      	ldr	r3, [r7, #12]
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], SYSCFG_EXTICR1_EXTI0 << ((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT) & 12UL), (Port << ((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT) & 12UL)));
#else
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT), (Port << ((POSITION_VAL((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT))) & 0x0000000FUL)));
 800060e:	4a17      	ldr	r2, [pc, #92]	; (800066c <LL_SYSCFG_SetEXTISource+0x68>)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	f003 0303 	and.w	r3, r3, #3
 8000616:	3302      	adds	r3, #2
 8000618:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	0c1b      	lsrs	r3, r3, #16
 8000620:	43db      	mvns	r3, r3
 8000622:	ea02 0103 	and.w	r1, r2, r3
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	0c1b      	lsrs	r3, r3, #16
 800062a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	fa93 f3a3 	rbit	r3, r3
 8000632:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d101      	bne.n	8000642 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 800063e:	2320      	movs	r3, #32
 8000640:	e003      	b.n	800064a <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	fab3 f383 	clz	r3, r3
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 030f 	and.w	r3, r3, #15
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	409a      	lsls	r2, r3
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <LL_SYSCFG_SetEXTISource+0x68>)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	f003 0303 	and.w	r3, r3, #3
 800065a:	430a      	orrs	r2, r1
 800065c:	3302      	adds	r3, #2
 800065e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
#endif
}
 8000662:	bf00      	nop
 8000664:	371c      	adds	r7, #28
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40010000 	.word	0x40010000

08000670 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <LL_FLASH_SetLatency+0x24>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f023 0207 	bic.w	r2, r3, #7
 8000680:	4904      	ldr	r1, [pc, #16]	; (8000694 <LL_FLASH_SetLatency+0x24>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4313      	orrs	r3, r2
 8000686:	600b      	str	r3, [r1, #0]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	58004000 	.word	0x58004000

08000698 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <LL_FLASH_GetLatency+0x14>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 0307 	and.w	r3, r3, #7
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	58004000 	.word	0x58004000

080006b0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80006c0:	4904      	ldr	r1, [pc, #16]	; (80006d4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	600b      	str	r3, [r1, #0]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	58000400 	.word	0x58000400

080006d8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80006d8:	b480      	push	{r7}
 80006da:	b08b      	sub	sp, #44	; 0x2c
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
#else
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa93 f3a3 	rbit	r3, r3
 80006f2:	613b      	str	r3, [r7, #16]
  return result;
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80006fe:	2320      	movs	r3, #32
 8000700:	e003      	b.n	800070a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	fab3 f383 	clz	r3, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2103      	movs	r1, #3
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	401a      	ands	r2, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800071a:	6a3b      	ldr	r3, [r7, #32]
 800071c:	fa93 f3a3 	rbit	r3, r3
 8000720:	61fb      	str	r3, [r7, #28]
  return result;
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800072c:	2320      	movs	r3, #32
 800072e:	e003      	b.n	8000738 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000732:	fab3 f383 	clz	r3, r3
 8000736:	b2db      	uxtb	r3, r3
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	fa01 f303 	lsl.w	r3, r1, r3
 8000740:	431a      	orrs	r2, r3
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	601a      	str	r2, [r3, #0]
#endif /* CORE_CM0PLUS */
}
 8000746:	bf00      	nop
 8000748:	372c      	adds	r7, #44	; 0x2c
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000750:	b480      	push	{r7}
 8000752:	b08b      	sub	sp, #44	; 0x2c
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
#else
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa93 f3a3 	rbit	r3, r3
 800076a:	613b      	str	r3, [r7, #16]
  return result;
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000776:	2320      	movs	r3, #32
 8000778:	e003      	b.n	8000782 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	fab3 f383 	clz	r3, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	2103      	movs	r1, #3
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	401a      	ands	r2, r3
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	fa93 f3a3 	rbit	r3, r3
 8000798:	61fb      	str	r3, [r7, #28]
  return result;
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d101      	bne.n	80007a8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80007a4:	2320      	movs	r3, #32
 80007a6:	e003      	b.n	80007b0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	fab3 f383 	clz	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	431a      	orrs	r2, r3
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	60da      	str	r2, [r3, #12]
#endif /* CORE_CM0PLUS */
}
 80007be:	bf00      	nop
 80007c0:	372c      	adds	r7, #44	; 0x2c
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	619a      	str	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	4013      	ands	r3, r2
 8000812:	041a      	lsls	r2, r3, #16
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	43d9      	mvns	r1, r3
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	400b      	ands	r3, r1
 800081c:	431a      	orrs	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	619a      	str	r2, [r3, #24]
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f7ff fccb 	bl	80001cc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f81d 	bl	8000874 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Check if the system has resumed from IWDG reset */
  Check_IWDG_Reset();
 800083a:	f000 f8e7 	bl	8000a0c <Check_IWDG_Reset>
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 f87f 	bl	8000940 <MX_GPIO_Init>
  MX_IWDG_Init();
 8000842:	f000 f85d 	bl	8000900 <MX_IWDG_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (1 != ubKeyPressed)
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <main+0x3c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b01      	cmp	r3, #1
 800084e:	d0fa      	beq.n	8000846 <main+0x1a>
    {
      /* Refresh IWDG down-counter to default value */
      LL_IWDG_ReloadCounter(IWDG);
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <main+0x40>)
 8000852:	f7ff fd72 	bl	800033a <LL_IWDG_ReloadCounter>
      
      LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <main+0x44>)
 800085c:	f7ff ffce 	bl	80007fc <LL_GPIO_TogglePin>
      /* Note that period used for Counter Reload MUST be higher than blinking timing value*/
      /* This Counter reload timeout period is a function of this value and the 
         clock prescaler. Refer to the datasheet for the timeout information  */
      LL_mDelay(LED_BLINK_FAST);
 8000860:	20c8      	movs	r0, #200	; 0xc8
 8000862:	f000 fd6f 	bl	8001344 <LL_mDelay>
    if (1 != ubKeyPressed)
 8000866:	e7ee      	b.n	8000846 <main+0x1a>
 8000868:	20000024 	.word	0x20000024
 800086c:	40003000 	.word	0x40003000
 8000870:	48000400 	.word	0x48000400

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000878:	2002      	movs	r0, #2
 800087a:	f7ff fef9 	bl	8000670 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800087e:	bf00      	nop
 8000880:	f7ff ff0a 	bl	8000698 <LL_FLASH_GetLatency>
 8000884:	4603      	mov	r3, r0
 8000886:	2b02      	cmp	r3, #2
 8000888:	d1fa      	bne.n	8000880 <SystemClock_Config+0xc>
  {
  }

  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800088a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088e:	f7ff ff0f 	bl	80006b0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_LSI_Enable();
 8000892:	f7ff fd9c 	bl	80003ce <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8000896:	bf00      	nop
 8000898:	f7ff fda9 	bl	80003ee <LL_RCC_LSI_IsReady>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d1fa      	bne.n	8000898 <SystemClock_Config+0x24>
  {
  }

  LL_RCC_MSI_Enable();
 80008a2:	f7ff fdb5 	bl	8000410 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 80008a6:	bf00      	nop
 80008a8:	f7ff fdc0 	bl	800042c <LL_RCC_MSI_IsReady>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d1fa      	bne.n	80008a8 <SystemClock_Config+0x34>
  {
  }

  LL_RCC_MSI_EnableRangeSelection();
 80008b2:	f7ff fdcb 	bl	800044c <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 80008b6:	20b0      	movs	r0, #176	; 0xb0
 80008b8:	f7ff fdd6 	bl	8000468 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fde6 	bl	800048e <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff fdf7 	bl	80004b6 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 80008c8:	bf00      	nop
 80008ca:	f7ff fe07 	bl	80004dc <LL_RCC_GetSysClkSource>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1fa      	bne.n	80008ca <SystemClock_Config+0x56>
  {
  }

  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff fe0c 	bl	80004f2 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAHB3Prescaler(LL_RCC_SYSCLK_DIV_1);
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff fe1c 	bl	8000518 <LL_RCC_SetAHB3Prescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fe2f 	bl	8000544 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fe3f 	bl	800056a <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(48000000);
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <SystemClock_Config+0x88>)
 80008ee:	f000 fd1b 	bl	8001328 <LL_Init1msTick>

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(48000000);
 80008f2:	4802      	ldr	r0, [pc, #8]	; (80008fc <SystemClock_Config+0x88>)
 80008f4:	f000 fd4c 	bl	8001390 <LL_SetSystemCoreClock>
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	02dc6c00 	.word	0x02dc6c00

08000900 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_IWDG_Init+0x3c>)
 8000906:	f7ff fd0b 	bl	8000320 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_IWDG_Init+0x3c>)
 800090c:	f7ff fd22 	bl	8000354 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_4);
 8000910:	2100      	movs	r1, #0
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <MX_IWDG_Init+0x3c>)
 8000914:	f7ff fd2b 	bl	800036e <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 4078);
 8000918:	f640 71ee 	movw	r1, #4078	; 0xfee
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <MX_IWDG_Init+0x3c>)
 800091e:	f7ff fd35 	bl	800038c <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 8000922:	bf00      	nop
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_IWDG_Init+0x3c>)
 8000926:	f7ff fd40 	bl	80003aa <LL_IWDG_IsReady>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d1f9      	bne.n	8000924 <MX_IWDG_Init+0x24>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <MX_IWDG_Init+0x3c>)
 8000932:	f7ff fd02 	bl	800033a <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40003000 	.word	0x40003000

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000962:	2002      	movs	r0, #2
 8000964:	f7ff fe36 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fe33 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 800096e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000972:	4825      	ldr	r0, [pc, #148]	; (8000a08 <MX_GPIO_Init+0xc8>)
 8000974:	f7ff ff35 	bl	80007e2 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8000978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800097e:	2301      	movs	r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	481d      	ldr	r0, [pc, #116]	; (8000a08 <MX_GPIO_Init+0xc8>)
 8000994:	f000 fc38 	bl	8001208 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8000998:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fe31 	bl	8000604 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f9e9 	bl	8000d98 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_PULL_UP);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2101      	movs	r1, #1
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f7ff febf 	bl	8000750 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2101      	movs	r1, #1
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009da:	f7ff fe7d 	bl	80006d8 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80009de:	f7ff fc19 	bl	8000214 <__NVIC_GetPriorityGrouping>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fc67 	bl	80002bc <NVIC_EncodePriority>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4619      	mov	r1, r3
 80009f2:	2006      	movs	r0, #6
 80009f4:	f7ff fc38 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80009f8:	2006      	movs	r0, #6
 80009fa:	f7ff fc19 	bl	8000230 <__NVIC_EnableIRQ>

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	48000400 	.word	0x48000400

08000a0c <Check_IWDG_Reset>:
  * @brief  This function check if the system has resumed from IWDG reset
  * @param  None
  * @retval None
  */
void Check_IWDG_Reset(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  if (LL_RCC_IsActiveFlag_IWDGRST())
 8000a10:	f7ff fdbe 	bl	8000590 <LL_RCC_IsActiveFlag_IWDGRST>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00e      	beq.n	8000a38 <Check_IWDG_Reset+0x2c>
  {
    /* clear IWDG reset flag */
    LL_RCC_ClearResetFlags();
 8000a1a:	f7ff fdcb 	bl	80005b4 <LL_RCC_ClearResetFlags>

    /* Re-Initialize GPIO configured peripheral */
    MX_GPIO_Init();
 8000a1e:	f7ff ff8f 	bl	8000940 <MX_GPIO_Init>
    
    /* turn Led on and wait for user event to perform example again */
    LED_On();
 8000a22:	f000 f80d 	bl	8000a40 <LED_On>
    
    while(ubKeyPressed != 1)
 8000a26:	bf00      	nop
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <Check_IWDG_Reset+0x30>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d1fa      	bne.n	8000a28 <Check_IWDG_Reset+0x1c>
    {
    }

    /* Reset ubKeyPressed value */
    ubKeyPressed = 0;
 8000a32:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <Check_IWDG_Reset+0x30>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000024 	.word	0x20000024

08000a40 <LED_On>:
  * @brief  Turn-on LED2.
  * @param  None
  * @retval None
  */
void LED_On(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <LED_On+0x14>)
 8000a4a:	f7ff febd 	bl	80007c8 <LL_GPIO_SetOutputPin>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	48000400 	.word	0x48000400

08000a58 <UserButton_Callback>:
  * @brief  Function to manage IRQ Handler
  * @param  None
  * @retval None
  */
void UserButton_Callback(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  ubKeyPressed = 1;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <UserButton_Callback+0x14>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000024 	.word	0x20000024

08000a70 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d101      	bne.n	8000a8a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	58000800 	.word	0x58000800

08000a9c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000aa4:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <LL_EXTI_ClearFlag_0_31+0x18>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60d3      	str	r3, [r2, #12]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	58000800 	.word	0x58000800

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <HardFault_Handler+0x4>

08000aca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8000b10:	2001      	movs	r0, #1
 8000b12:	f7ff ffad 	bl	8000a70 <LL_EXTI_IsActiveFlag_0_31>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d004      	beq.n	8000b26 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f7ff ffbd 	bl	8000a9c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    
    /* Manage code in main.c.*/
    UserButton_Callback(); 
 8000b22:	f7ff ff99 	bl	8000a58 <UserButton_Callback>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
	...

08000b38 <LL_EXTI_EnableIT_0_31>:
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <LL_EXTI_EnableIT_0_31+0x24>)
 8000b42:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000b46:	4905      	ldr	r1, [pc, #20]	; (8000b5c <LL_EXTI_EnableIT_0_31+0x24>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	58000800 	.word	0x58000800

08000b60 <LL_EXTI_EnableIT_32_63>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b6e:	4905      	ldr	r1, [pc, #20]	; (8000b84 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	58000800 	.word	0x58000800

08000b88 <LL_EXTI_DisableIT_0_31>:
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <LL_EXTI_DisableIT_0_31+0x24>)
 8000b92:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	4904      	ldr	r1, [pc, #16]	; (8000bac <LL_EXTI_DisableIT_0_31+0x24>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	58000800 	.word	0x58000800

08000bb0 <LL_EXTI_DisableIT_32_63>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <LL_EXTI_DisableIT_32_63+0x24>)
 8000bba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4904      	ldr	r1, [pc, #16]	; (8000bd4 <LL_EXTI_DisableIT_32_63+0x24>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	58000800 	.word	0x58000800

08000bd8 <LL_EXTI_EnableEvent_0_31>:
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <LL_EXTI_EnableEvent_0_31+0x24>)
 8000be2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000be6:	4905      	ldr	r1, [pc, #20]	; (8000bfc <LL_EXTI_EnableEvent_0_31+0x24>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	58000800 	.word	0x58000800

08000c00 <LL_EXTI_EnableEvent_32_63>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <LL_EXTI_EnableEvent_32_63+0x24>)
 8000c0a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000c0e:	4905      	ldr	r1, [pc, #20]	; (8000c24 <LL_EXTI_EnableEvent_32_63+0x24>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	58000800 	.word	0x58000800

08000c28 <LL_EXTI_DisableEvent_0_31>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000c32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	4904      	ldr	r1, [pc, #16]	; (8000c4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	58000800 	.word	0x58000800

08000c50 <LL_EXTI_DisableEvent_32_63>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000c5a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	4904      	ldr	r1, [pc, #16]	; (8000c74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	58000800 	.word	0x58000800

08000c78 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4904      	ldr	r1, [pc, #16]	; (8000c98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	600b      	str	r3, [r1, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	58000800 	.word	0x58000800

08000c9c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000ca6:	6a1a      	ldr	r2, [r3, #32]
 8000ca8:	4904      	ldr	r1, [pc, #16]	; (8000cbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	620b      	str	r3, [r1, #32]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	58000800 	.word	0x58000800

08000cc0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	4903      	ldr	r1, [pc, #12]	; (8000ce0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	58000800 	.word	0x58000800

08000ce4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <LL_EXTI_DisableRisingTrig_32_63+0x20>)
 8000cee:	6a1a      	ldr	r2, [r3, #32]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4903      	ldr	r1, [pc, #12]	; (8000d04 <LL_EXTI_DisableRisingTrig_32_63+0x20>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	620b      	str	r3, [r1, #32]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	58000800 	.word	0x58000800

08000d08 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	4904      	ldr	r1, [pc, #16]	; (8000d28 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	604b      	str	r3, [r1, #4]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	58000800 	.word	0x58000800

08000d2c <LL_EXTI_EnableFallingTrig_32_63>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	58000800 	.word	0x58000800

08000d50 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4903      	ldr	r1, [pc, #12]	; (8000d70 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	604b      	str	r3, [r1, #4]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	58000800 	.word	0x58000800

08000d74 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <LL_EXTI_DisableFallingTrig_32_63+0x20>)
 8000d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4903      	ldr	r1, [pc, #12]	; (8000d94 <LL_EXTI_DisableFallingTrig_32_63+0x20>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	58000800 	.word	0x58000800

08000d98 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7a1b      	ldrb	r3, [r3, #8]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80cd 	beq.w	8000f48 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d061      	beq.n	8000e7a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7a5b      	ldrb	r3, [r3, #9]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d01c      	beq.n	8000df8 <LL_EXTI_Init+0x60>
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	dc25      	bgt.n	8000e0e <LL_EXTI_Init+0x76>
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <LL_EXTI_Init+0x34>
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d00b      	beq.n	8000de2 <LL_EXTI_Init+0x4a>
 8000dca:	e020      	b.n	8000e0e <LL_EXTI_Init+0x76>
          status = ERROR;
          break;
#else
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff29 	bl	8000c28 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff feac 	bl	8000b38 <LL_EXTI_EnableIT_0_31>
          break;
 8000de0:	e018      	b.n	8000e14 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fece 	bl	8000b88 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fef1 	bl	8000bd8 <LL_EXTI_EnableEvent_0_31>
          break;
 8000df6:	e00d      	b.n	8000e14 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe9b 	bl	8000b38 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fee6 	bl	8000bd8 <LL_EXTI_EnableEvent_0_31>
          break;
 8000e0c:	e002      	b.n	8000e14 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
          break;
 8000e12:	bf00      	nop
#endif
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7a9b      	ldrb	r3, [r3, #10]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d02e      	beq.n	8000e7a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7a9b      	ldrb	r3, [r3, #10]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d01c      	beq.n	8000e5e <LL_EXTI_Init+0xc6>
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	dc25      	bgt.n	8000e74 <LL_EXTI_Init+0xdc>
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d002      	beq.n	8000e32 <LL_EXTI_Init+0x9a>
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d00b      	beq.n	8000e48 <LL_EXTI_Init+0xb0>
 8000e30:	e020      	b.n	8000e74 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff8a 	bl	8000d50 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff19 	bl	8000c78 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000e46:	e019      	b.n	8000e7c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff37 	bl	8000cc0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff56 	bl	8000d08 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000e5c:	e00e      	b.n	8000e7c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff08 	bl	8000c78 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff4b 	bl	8000d08 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000e72:	e003      	b.n	8000e7c <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
            break;
 8000e78:	e000      	b.n	8000e7c <LL_EXTI_Init+0xe4>
        }
      }
 8000e7a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d076      	beq.n	8000f72 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7a5b      	ldrb	r3, [r3, #9]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d01c      	beq.n	8000ec6 <LL_EXTI_Init+0x12e>
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	dc25      	bgt.n	8000edc <LL_EXTI_Init+0x144>
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <LL_EXTI_Init+0x102>
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d00b      	beq.n	8000eb0 <LL_EXTI_Init+0x118>
 8000e98:	e020      	b.n	8000edc <LL_EXTI_Init+0x144>
          status = ERROR;
          break;
#else
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fed6 	bl	8000c50 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe59 	bl	8000b60 <LL_EXTI_EnableIT_32_63>
          break;
 8000eae:	e018      	b.n	8000ee2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fe7b 	bl	8000bb0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fe9e 	bl	8000c00 <LL_EXTI_EnableEvent_32_63>
          break;
 8000ec4:	e00d      	b.n	8000ee2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe48 	bl	8000b60 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe93 	bl	8000c00 <LL_EXTI_EnableEvent_32_63>
          break;
 8000eda:	e002      	b.n	8000ee2 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
          break;
 8000ee0:	bf00      	nop
#endif
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7a9b      	ldrb	r3, [r3, #10]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d043      	beq.n	8000f72 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7a9b      	ldrb	r3, [r3, #10]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d01c      	beq.n	8000f2c <LL_EXTI_Init+0x194>
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	dc25      	bgt.n	8000f42 <LL_EXTI_Init+0x1aa>
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d002      	beq.n	8000f00 <LL_EXTI_Init+0x168>
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d00b      	beq.n	8000f16 <LL_EXTI_Init+0x17e>
 8000efe:	e020      	b.n	8000f42 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff35 	bl	8000d74 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fec4 	bl	8000c9c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000f14:	e02e      	b.n	8000f74 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fee2 	bl	8000ce4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff01 	bl	8000d2c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000f2a:	e023      	b.n	8000f74 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff feb3 	bl	8000c9c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fef6 	bl	8000d2c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000f40:	e018      	b.n	8000f74 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
            break;
 8000f46:	e015      	b.n	8000f74 <LL_EXTI_Init+0x1dc>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_C2_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
    LL_C2_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
#else
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fe1b 	bl	8000b88 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fe66 	bl	8000c28 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fe25 	bl	8000bb0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fe70 	bl	8000c50 <LL_EXTI_DisableEvent_32_63>
 8000f70:	e000      	b.n	8000f74 <LL_EXTI_Init+0x1dc>
      }
 8000f72:	bf00      	nop
#endif
  }
  return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <LL_GPIO_SetPinMode>:
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b08b      	sub	sp, #44	; 0x2c
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa93 f3a3 	rbit	r3, r3
 8000f98:	613b      	str	r3, [r7, #16]
  return result;
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000fa4:	2320      	movs	r3, #32
 8000fa6:	e003      	b.n	8000fb0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fab3 f383 	clz	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	401a      	ands	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	fa93 f3a3 	rbit	r3, r3
 8000fc6:	61fb      	str	r3, [r7, #28]
  return result;
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	e003      	b.n	8000fde <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	bf00      	nop
 8000fee:	372c      	adds	r7, #44	; 0x2c
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <LL_GPIO_SetPinOutputType>:
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b085      	sub	sp, #20
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	43db      	mvns	r3, r3
 800100a:	401a      	ands	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	431a      	orrs	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	605a      	str	r2, [r3, #4]
}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <LL_GPIO_SetPinSpeed>:
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	; 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	613b      	str	r3, [r7, #16]
  return result;
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800104a:	2320      	movs	r3, #32
 800104c:	e003      	b.n	8001056 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2103      	movs	r1, #3
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	401a      	ands	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	61fb      	str	r3, [r7, #28]
  return result;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001078:	2320      	movs	r3, #32
 800107a:	e003      	b.n	8001084 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	431a      	orrs	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	609a      	str	r2, [r3, #8]
}
 8001092:	bf00      	nop
 8001094:	372c      	adds	r7, #44	; 0x2c
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <LL_GPIO_SetPinPull>:
{
 800109c:	b480      	push	{r7}
 800109e:	b08b      	sub	sp, #44	; 0x2c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	613b      	str	r3, [r7, #16]
  return result;
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80010c2:	2320      	movs	r3, #32
 80010c4:	e003      	b.n	80010ce <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2103      	movs	r1, #3
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	401a      	ands	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	61fb      	str	r3, [r7, #28]
  return result;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80010f0:	2320      	movs	r3, #32
 80010f2:	e003      	b.n	80010fc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	431a      	orrs	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	60da      	str	r2, [r3, #12]
}
 800110a:	bf00      	nop
 800110c:	372c      	adds	r7, #44	; 0x2c
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <LL_GPIO_SetAFPin_0_7>:
{
 8001114:	b480      	push	{r7}
 8001116:	b08b      	sub	sp, #44	; 0x2c
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a1a      	ldr	r2, [r3, #32]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	613b      	str	r3, [r7, #16]
  return result;
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800113a:	2320      	movs	r3, #32
 800113c:	e003      	b.n	8001146 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	210f      	movs	r1, #15
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	401a      	ands	r2, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	61fb      	str	r3, [r7, #28]
  return result;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001168:	2320      	movs	r3, #32
 800116a:	e003      	b.n	8001174 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	431a      	orrs	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	621a      	str	r2, [r3, #32]
}
 8001182:	bf00      	nop
 8001184:	372c      	adds	r7, #44	; 0x2c
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <LL_GPIO_SetAFPin_8_15>:
{
 800118c:	b480      	push	{r7}
 800118e:	b08b      	sub	sp, #44	; 0x2c
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	613b      	str	r3, [r7, #16]
  return result;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80011b4:	2320      	movs	r3, #32
 80011b6:	e003      	b.n	80011c0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	210f      	movs	r1, #15
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	61fb      	str	r3, [r7, #28]
  return result;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80011e4:	2320      	movs	r3, #32
 80011e6:	e003      	b.n	80011f0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	431a      	orrs	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011fe:	bf00      	nop
 8001200:	372c      	adds	r7, #44	; 0x2c
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
#if defined(CORE_CM0PLUS)
  pinpos = 0;
#else
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	60fb      	str	r3, [r7, #12]
  return result;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <LL_GPIO_Init+0x26>
    return 32U;
 800122a:	2320      	movs	r3, #32
 800122c:	e003      	b.n	8001236 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	61fb      	str	r3, [r7, #28]
#endif /* CORE_CM0PLUS */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001238:	e04e      	b.n	80012d8 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	2101      	movs	r1, #1
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d040      	beq.n	80012d2 <LL_GPIO_Init+0xca>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	461a      	mov	r2, r3
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fe90 	bl	8000f7e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d003      	beq.n	800126e <LL_GPIO_Init+0x66>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d10d      	bne.n	800128a <LL_GPIO_Init+0x82>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	461a      	mov	r2, r3
 8001274:	69b9      	ldr	r1, [r7, #24]
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fed4 	bl	8001024 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	461a      	mov	r2, r3
 8001282:	69b9      	ldr	r1, [r7, #24]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff feb6 	bl	8000ff6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	461a      	mov	r2, r3
 8001290:	69b9      	ldr	r1, [r7, #24]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff02 	bl	800109c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d111      	bne.n	80012c4 <LL_GPIO_Init+0xbc>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d807      	bhi.n	80012b6 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	461a      	mov	r2, r3
 80012ac:	69b9      	ldr	r1, [r7, #24]
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff30 	bl	8001114 <LL_GPIO_SetAFPin_0_7>
 80012b4:	e006      	b.n	80012c4 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	461a      	mov	r2, r3
 80012bc:	69b9      	ldr	r1, [r7, #24]
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff64 	bl	800118c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	461a      	mov	r2, r3
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fe56 	bl	8000f7e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	fa22 f303 	lsr.w	r3, r2, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1a9      	bne.n	800123a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LL_InitTick>:
  * @param  Ticks Number of ticks
  * @retval None
  */
#endif /* CORE_CM0PLUS */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  if (Ticks > 0U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00c      	beq.n	800131a <LL_InitTick+0x2a>
  {
    /* Configure the SysTick to have interrupt in 1ms time base */
    SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <LL_InitTick+0x34>)
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
    SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <LL_InitTick+0x34>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <LL_InitTick+0x34>)
 8001316:	2205      	movs	r2, #5
 8001318:	601a      	str	r2, [r3, #0]
                     SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	e000e010 	.word	0xe000e010

08001328 <LL_Init1msTick>:
    *         (HCLK1_Frequency field)
    * @retval None
    */
#endif /* CORE_CM0PLUS */
  void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000);
 8001330:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ffdb 	bl	80012f0 <LL_InitTick>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <LL_mDelay+0x48>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay;
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001352:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d00c      	beq.n	800137a <LL_mDelay+0x36>
  {
    tmpDelay ++;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8001366:	e008      	b.n	800137a <LL_mDelay+0x36>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <LL_mDelay+0x48>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <LL_mDelay+0x36>
    {
      tmpDelay --;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3b01      	subs	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f3      	bne.n	8001368 <LL_mDelay+0x24>
    }
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	e000e010 	.word	0xe000e010

08001390 <LL_SetSystemCoreClock>:
            @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field))
  * @retval None
  */
#endif /* CORE_CM0PLUS */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001398:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <LL_SetSystemCoreClock+0x18>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000000 	.word	0x20000000

080013ac <__libc_init_array>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4d0d      	ldr	r5, [pc, #52]	; (80013e4 <__libc_init_array+0x38>)
 80013b0:	4c0d      	ldr	r4, [pc, #52]	; (80013e8 <__libc_init_array+0x3c>)
 80013b2:	1b64      	subs	r4, r4, r5
 80013b4:	10a4      	asrs	r4, r4, #2
 80013b6:	2600      	movs	r6, #0
 80013b8:	42a6      	cmp	r6, r4
 80013ba:	d109      	bne.n	80013d0 <__libc_init_array+0x24>
 80013bc:	4d0b      	ldr	r5, [pc, #44]	; (80013ec <__libc_init_array+0x40>)
 80013be:	4c0c      	ldr	r4, [pc, #48]	; (80013f0 <__libc_init_array+0x44>)
 80013c0:	f000 f818 	bl	80013f4 <_init>
 80013c4:	1b64      	subs	r4, r4, r5
 80013c6:	10a4      	asrs	r4, r4, #2
 80013c8:	2600      	movs	r6, #0
 80013ca:	42a6      	cmp	r6, r4
 80013cc:	d105      	bne.n	80013da <__libc_init_array+0x2e>
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d4:	4798      	blx	r3
 80013d6:	3601      	adds	r6, #1
 80013d8:	e7ee      	b.n	80013b8 <__libc_init_array+0xc>
 80013da:	f855 3b04 	ldr.w	r3, [r5], #4
 80013de:	4798      	blx	r3
 80013e0:	3601      	adds	r6, #1
 80013e2:	e7f2      	b.n	80013ca <__libc_init_array+0x1e>
 80013e4:	08001410 	.word	0x08001410
 80013e8:	08001410 	.word	0x08001410
 80013ec:	08001410 	.word	0x08001410
 80013f0:	08001414 	.word	0x08001414

080013f4 <_init>:
 80013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f6:	bf00      	nop
 80013f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fa:	bc08      	pop	{r3}
 80013fc:	469e      	mov	lr, r3
 80013fe:	4770      	bx	lr

08001400 <_fini>:
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	bf00      	nop
 8001404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001406:	bc08      	pop	{r3}
 8001408:	469e      	mov	lr, r3
 800140a:	4770      	bx	lr
 800140c:	0000      	movs	r0, r0
	...
